import streamlit as st
import pandas as pd
import plotly.express as px

# ======================
# –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´
# ======================
st.set_page_config(page_title="YouTube Dashboard üöÄ", layout="wide")

st.title("üìä YouTube Dashboard üöÄ")
st.markdown("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–æ—Ö–æ–¥ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏")

# ======================
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨
# ======================
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"])

n_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 50, 10)

# ======================
# –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ======================
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # –û—á–∏—â–∞–µ–º –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    df = df.dropna(subset=["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"])
    
    # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ" in df.columns:
        df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"] = pd.to_datetime(df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"], errors="coerce")
        df = df.sort_values("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", ascending=False)

    df = df.head(n_videos)

    # ======================
    # –í–´–ë–û–† –ú–ï–¢–†–ò–ö
    # ======================
    st.sidebar.subheader("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    metrics_blocks = {
        "–û–±—â–µ–µ": ["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑—Ä–∏—Ç–µ–ª–∏", "–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—á–∞—Å—ã)"],
        "–£–¥–µ—Ä–∂–∞–Ω–∏–µ": ["–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", "–°—Ä–µ–¥–Ω–∏–π % –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", 
                      "–ü—Ä–æ–¥–æ–ª–∂–∏–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å (%)", "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã",
                      "–ö–ª–∏–∫–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ–Ω–µ—á–Ω–æ–π –∑–∞—Å—Ç–∞–≤–∫–∏", "CTR –∫–æ–Ω–µ—á–Ω—ã—Ö –∑–∞—Å—Ç–∞–≤–æ–∫"],
        "–¢—Ä–∞—Ñ–∏–∫": ["–ü–æ–∫–∞–∑—ã", "CTR –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)", "–¶–µ–Ω–∞ –∑–∞ —Ç—ã—Å—è—á—É –ø–æ–∫–∞–∑–æ–≤ (CPM)", 
                   "–ú–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–µ–º—ã–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"],
        "–î–æ—Ö–æ–¥": ["–†–∞—Å—á–µ—Ç–Ω—ã–π –¥–æ—Ö–æ–¥ (USD)", "–î–æ—Ö–æ–¥ –Ω–∞ —Ç—ã—Å—è—á—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (RPM)", 
                  "–î–æ—Ö–æ–¥ –æ—Ç —Ä–µ–∫–ª–∞–º—ã –Ω–∞ YouTube (USD)", "YouTube Premium (USD)", 
                  "–î–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"]
    }

    selected_metrics = []
    for block, metrics in metrics_blocks.items():
        with st.sidebar.expander(block, expanded=True):
            for metric in metrics:
                if metric in df.columns:
                    if st.checkbox(metric, True):
                        selected_metrics.append(metric)

    # ======================
    # –í–´–í–û–î –ú–ï–¢–†–ò–ö
    # ======================
    st.subheader("üìà –¢–∞–±–ª–∏—Ü–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º")
    st.dataframe(df[["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"] + selected_metrics])

    # ======================
    # –ì–†–ê–§–ò–ö–ò
    # ======================
    st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫")

    for metric in selected_metrics:
        if metric in df.columns:
            fig = px.bar(df, x="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", y=metric, 
                         title=f"{metric} –ø–æ –≤–∏–¥–µ–æ", 
                         text_auto=True)
            st.plotly_chart(fig, use_container_width=True)

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
