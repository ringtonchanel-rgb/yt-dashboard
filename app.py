# app.py ‚Äî Year Mix + Auto Narrative
# –û–¥–∏–Ω —ç–∫—Ä–∞–Ω: 2 –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º + —É–º–Ω—ã–π —Ç–µ–∫—Å—Ç-–≤—ã–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –¥–∞–Ω–Ω—ã–µ.

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# ---------------- Page ----------------
st.set_page_config(page_title="YouTube Dashboard ‚Äî Year Mix", layout="wide")
st.markdown("<h1 style='text-align:center'>üìä –ì–æ–¥–æ–≤–æ–π –º–∏–∫—Å: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ</h1>", unsafe_allow_html=True)
st.caption("–ó–∞–≥—Ä—É–∑–∏ CSV –∏–∑ YouTube Studio. –ù–∏–∂–µ ‚Äî –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º –∏ –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –¥–∞–Ω–Ω—ã–µ.")

# ---------------- Sidebar ----------------
st.sidebar.header("‚öôÔ∏è –î–∞–Ω–Ω—ã–µ")
file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–ø–æ–¥—Ö–æ–¥–∏—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ Advanced mode YouTube Studio)", type=["csv"]
)
show_table = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ü–∏—Ñ—Ä–∞–º–∏", value=False)

# ---------------- Helpers ----------------
def _norm(s: str) -> str: return s.strip().lower()

MAP = {
    "publish_time": [
        "video publish time","publish time","–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ","–¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏","publish date"
    ],
    "views": ["views","–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"],
}

def find_col(df: pd.DataFrame, names) -> str | None:
    if isinstance(names, str): names = [names]
    by_norm = {_norm(c): c for c in df.columns}
    for n in names:
        nn = _norm(n)
        if nn in by_norm: return by_norm[nn]
    for n in names:
        nn = _norm(n)
        for c in df.columns:
            if nn in _norm(c): return c
    return None

def detect_columns(df: pd.DataFrame):
    return {"publish_time": find_col(df, MAP["publish_time"]),
            "views": find_col(df, MAP["views"])}

def pct(a, b):
    if b == 0 or pd.isna(b): return np.nan
    return 100 * (a - b) / b

def close_enough(a, b, tol=0.15):
    """–ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö tol=15%)."""
    if pd.isna(a) or pd.isna(b) or b == 0: return False
    return abs(a - b) / max(b, 1e-9) <= tol

def year_or_none(x):
    try: return int(x)
    except: return None

# ---------------- Main ----------------
if not file:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª ‚Äî –ø–æ—Å—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –Ω–∞–ø–∏—à—É –≤—ã–≤–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    st.stop()

df = pd.read_csv(file)
df.columns = [c.strip() for c in df.columns]

# —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ '–ò–¢–û–ì–û'
try:
    df = df[~df.apply(lambda r: r.astype(str).str.contains("–∏—Ç–æ–≥", case=False).any(), axis=1)]
except Exception:
    pass

C = detect_columns(df)
pub_col = C["publish_time"]
views_col = C["views"]

missing = []
if not (pub_col and pub_col in df.columns): missing.append("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
if not (views_col and views_col in df.columns): missing.append("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
if missing:
    st.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ: " + ", ".join(missing))
    st.stop()

# –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
df[pub_col] = pd.to_datetime(df[pub_col], errors="coerce")
df = df[df[pub_col].notna()].copy()
df["_views_num"] = pd.to_numeric(df[views_col], errors="coerce")
df["_year"] = df[pub_col].dt.year

# –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
views_year = (
    df.groupby("_year", as_index=False)["_views_num"]
      .sum()
      .rename(columns={"_year": "–ì–æ–¥", "_views_num": "–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"})
      .sort_values("–ì–æ–¥")
)
count_year = (
    df.groupby("_year", as_index=False)
      .size()
      .rename(columns={"_year": "–ì–æ–¥", "size": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"})
      .sort_values("–ì–æ–¥")
)

if views_year.empty or count_year.empty:
    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≥–æ–¥–∞–º.")
    st.stop()

# –æ–ø–æ—Ä–Ω—ã–π –≥–æ–¥: 2024 –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
years_list = sorted(views_year["–ì–æ–¥"].dropna().astype(int).unique())
default_ref = 2024 if 2024 in years_list else int(max(years_list))
ref_year = st.sidebar.selectbox("–û–ø–æ—Ä–Ω—ã–π –≥–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏", years_list, index=years_list.index(default_ref))

# ---------------- Charts ----------------
c1, c2 = st.columns(2)

fig1 = px.bar(
    views_year, x="–ì–æ–¥", y="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
    text="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", template="simple_white"
)
fig1.update_traces(marker_color="#4e79a7", texttemplate="%{text:,}", textposition="outside")
fig1.update_layout(
    title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –≥–æ–¥–∞–º",
    xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
    yaxis_title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
    showlegend=False, margin=dict(l=10, r=10, t=50, b=10), height=430
)
fig1.update_xaxes(type="category", categoryorder="category ascending")
c1.plotly_chart(fig1, use_container_width=True)

fig2 = px.bar(
    count_year, x="–ì–æ–¥", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", template="simple_white"
)
fig2.update_traces(marker_color="#4e79a7", texttemplate="%{text}", textposition="outside")
fig2.update_layout(
    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ –≥–æ–¥–∞–º",
    xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
    showlegend=False, margin=dict(l=10, r=10, t=50, b=10), height=430
)
fig2.update_xaxes(type="category", categoryorder="category ascending")
c2.plotly_chart(fig2, use_container_width=True)

if show_table:
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞")
    tbl = pd.merge(views_year, count_year, on="–ì–æ–¥", how="outer").sort_values("–ì–æ–¥")
    st.dataframe(tbl, use_container_width=True)

# ---------------- Auto-Narrative ----------------
st.markdown("### üß† –ê–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –¥–∞–Ω–Ω—ã–º")

# —Å–ª–æ–≤–∞—Ä–∏ –ø–æ –≥–æ–¥–∞–º
vy = dict(zip(views_year["–ì–æ–¥"], views_year["–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"]))
cy = dict(zip(count_year["–ì–æ–¥"], count_year["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"]))

# —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
ranking = sorted(vy.items(), key=lambda x: x[1], reverse=True)
ranking_years = [str(int(y)) for y,_ in ranking[:5]]

# ¬´—Å—Ç–∞—Ä—ã–π¬ª vs ¬´—Å–≤–µ–∂–∏–π¬ª –∫–æ–Ω—Ç–µ–Ω—Ç
older_sum = sum(v for y, v in vy.items() if y < ref_year)
ref_sum   = vy.get(ref_year, np.nan)

# —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–µ—Ç ref vs ref-1
prev_year = ref_year - 1 if (ref_year - 1) in vy else None
views_ref = vy.get(ref_year, np.nan)
views_prev = vy.get(prev_year, np.nan) if prev_year else np.nan
cnt_ref = cy.get(ref_year, np.nan)
cnt_prev = cy.get(prev_year, np.nan) if prev_year else np.nan

# —Ç–µ–∫—Å—Ç
p = []

# 1) –≤–≤–æ–¥–Ω–∞—è
p.append(
    f"–í –∫–∞—á–µ—Å—Ç–≤–µ –æ–ø–æ—Ä–Ω–æ–π —Ç–æ—á–∫–∏ –≤–æ–∑—å–º—ë–º **{ref_year}**-–π –≥–æ–¥"
    + (" ‚Äî –≤ –Ω–∞–±–æ—Ä–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–æ–¥." if ref_year == 2024 else ".")
)

# 2) —Ä–µ–π—Ç–∏–Ω–≥
if ranking_years:
    p.append(
        "–ü–æ —Å—É–º–º–∞—Ä–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –ª–∏–¥–∏—Ä—É—é—Ç –≥–æ–¥—ã (–≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è): **" +
        " ‚Üí ".join(ranking_years) + "**."
    )

# 3) —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä—Ñ–æ—Ä–º–∏—Ç?
if not pd.isna(ref_sum) and older_sum > ref_sum:
    share_old = older_sum / (older_sum + ref_sum) * 100 if (older_sum + ref_sum) > 0 else np.nan
    p.append(
        f"–°—É–º–º–∞—Ä–Ω–æ **—Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç** (–≤–∏–¥–µ–æ –¥–æ {ref_year} –≥–æ–¥–∞) —Å–æ–±—Ä–∞–ª –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, —á–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç {ref_year}-–≥–æ –≥–æ–¥–∞ "
        + (f"(‚âà{share_old:.0f}% –æ—Ç –ø–∞—Ä—ã ¬´—Å—Ç–∞—Ä—ã–π+{ref_year}¬ª)." if not pd.isna(share_old) else ".")
    )

# 4) ¬´2022‚Äì2024 –¥–µ—Ä–∂–∞–ª–∏—Å—å –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ¬ª ‚Äî –æ–±–æ–±—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
frame = [y for y in [2022, 2023, 2024] if y in vy]
if len(frame) >= 2:
    vals = [vy[y] for y in frame]
    mx, mn = max(vals), min(vals)
    if mx > 0 and (mx - mn) / mx <= 0.15:  # –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 15%
        p.append("–í —Ä–∞–∑—Ä–µ–∑–µ **2022‚Äì2024** —Å—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–µ—Ä–∂–∞–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (¬±15%).")

# 5) ¬´—á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —É—Ä–æ–≤–Ω—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞, –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ¬ª
if prev_year and not any(pd.isna(x) for x in [views_ref, views_prev, cnt_ref, cnt_prev]):
    if close_enough(views_ref, views_prev, tol=0.12) and cnt_ref > cnt_prev:
        times = cnt_ref / max(cnt_prev, 1)
        p.append(
            f"–ü—Ä–∏ **—Å—Ö–æ–∂–µ–º —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤** —É {prev_year} –∏ {ref_year} "
            f"–≤ {ref_year}-–º –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å **–±–æ–ª—å—à–µ –≤–∏–¥–µ–æ** (‚âà√ó{times:.1f}), —á—Ç–æ–±—ã —É–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        )

# –≤—ã–≤–æ–¥
if p:
    for s in p:
        st.markdown("‚Ä¢ " + s)
else:
    st.write("–î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–æ–¥–∞–º–∏.")

st.caption("–¢–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª. –ü–æ—Ä–æ–≥ ¬´‚âà –æ–¥–∏–Ω–∞–∫–æ–≤–æ¬ª ‚Äî 12‚Äì15%.")
