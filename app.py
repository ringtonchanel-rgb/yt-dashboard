# app.py ‚Äî Zero Clean Core (–æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–¥ –æ—Ç—á–µ—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import timedelta
import re, html

st.set_page_config(page_title="YouTube Dashboard ‚Äî Zero Core", layout="wide")
st.markdown("<h1 style='text-align:center'>üìä YouTube Dashboard ‚Äî Zero Core</h1>", unsafe_allow_html=True)
st.caption("–û–¥–∏–Ω —ç–∫—Ä–∞–Ω. –ó–∞–≥—Ä—É–∂–∞–µ—à—å CSV ‚Äî –ø–æ–ª—É—á–∞–µ—à—å —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ (–≥–æ–¥–æ–≤–æ–π –º–∏–∫—Å, –ª–æ–∫–æ–º–æ—Ç–∏–≤—ã, –∫–∞—á–µ—Å—Ç–≤–æ).")

# ------------------ Sidebar ------------------
st.sidebar.header("‚öôÔ∏è –î–∞–Ω–Ω—ã–µ")
file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–∫–∞–∫ ¬´–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ - Jan 23 - Aug 25.csv¬ª)", type=["csv"])

st.sidebar.header("üéõ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±–æ—Ä–∫–∏")
n_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –±—Ä–∞—Ç—å (–ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏):", 10, 1000, 500, step=10)
top_k    = st.sidebar.slider("–¢–û–ü ¬´–ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤¬ª –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º:", 5, 100, 20)
only_year = st.sidebar.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü.)", ["–í—Å–µ –≥–æ–¥—ã"] + [str(y) for y in range(2018, 2031)], index=0)

st.sidebar.header("üß© –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å")
show_year_mix  = st.sidebar.checkbox("–¢–∞–±–ª–∏—Ü–∞ ¬´–ú–∏–∫—Å –ø–æ –≥–æ–¥–∞–º¬ª", value=True)
show_locom     = st.sidebar.checkbox("–¢–∞–±–ª–∏—Ü–∞ ¬´–õ–æ–∫–æ–º–æ—Ç–∏–≤—ã (–¢–û–ü –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º)¬ª", value=True)
show_quality   = st.sidebar.checkbox("–¢–∞–±–ª–∏—Ü–∞ ¬´–ö–∞—á–µ—Å—Ç–≤–æ (AVD / %–¥–æ—Å–º–æ—Ç—Ä–∞)¬ª", value=True)
show_ctr       = st.sidebar.checkbox("–¢–∞–±–ª–∏—Ü–∞ ¬´CTR & –ü–æ–∫–∞–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)¬ª", value=True)
show_underperf = st.sidebar.checkbox("–¢–∞–±–ª–∏—Ü–∞ ¬´–ü—Ä–æ—Å–µ–¥–∞—é—Ç (–Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω)¬ª", value=True)
show_charts    = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–∞–º (–º–∏–Ω–∏–º—É–º)", value=False)

# ------------------ Helpers ------------------
def norm(s:str)->str: return s.strip().lower()

MAP = {
    "title": ["–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ","title","video title","–Ω–∞–∑–≤–∞–Ω–∏–µ"],
    "video_id": ["video id","external video id","–∫–æ–Ω—Ç–µ–Ω—Ç","content","id –≤–∏–¥–µ–æ","–∏–¥ –≤–∏–¥–µ–æ"],
    "publish_time": ["video publish time","publish time","–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ","–¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"],
    "views": ["views","–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"],
    "impressions": ["impressions","–ø–æ–∫–∞–∑—ã"],
    "ctr": ["impressions click-through rate","ctr","impressions click-through rate (%)","ctr –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ"],
    "avd": ["average view duration","—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"],
    "duration": ["duration","–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å","–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
    "revenue": ["estimated partner revenue","—Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–æ—Ö–æ–¥","—Ä–∞—Å—á—ë—Ç–Ω—ã–π –¥–æ—Ö–æ–¥"],
    "watch_time_hours": ["watch time (hours)","–≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—á–∞—Å—ã)"],
    "unique_viewers": ["unique viewers","—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑—Ä–∏—Ç–µ–ª–∏"],
    "engaged_views": ["engaged views","–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã"],
}

def find_col(df: pd.DataFrame, keys) -> str | None:
    if isinstance(keys, str): keys=[keys]
    by_norm = {norm(c): c for c in df.columns}
    for k in keys:
        if norm(k) in by_norm: return by_norm[norm(k)]
    for k in keys:
        nk = norm(k)
        for c in df.columns:
            if nk in norm(c): return c
    return None

def detect_cols(df: pd.DataFrame):
    return {k: find_col(df, v) for k,v in MAP.items()}

def parse_duration_to_seconds(x):
    if pd.isna(x): return np.nan
    s = str(x).strip()
    if re.fullmatch(r"\d+(\.\d+)?", s):
        try: return float(s)
        except: return np.nan
    parts = s.split(":")
    try:
        parts = [int(p) for p in parts]
        if len(parts)==2: m, ss = parts; return m*60 + ss
        if len(parts)==3: h,m,ss = parts; return h*3600 + m*60 + ss
        return np.nan
    except: return np.nan

def seconds_to_hhmmss(x):
    try:
        x = int(round(float(x))); return str(timedelta(seconds=x))
    except: return ""

def shorten(text, n=60):
    t = "" if text is None else str(text)
    return (t[:n]+"‚Ä¶") if len(t)>n else t

def add_clickable(df, title_col, id_col, new_col="–í–∏–¥–µ–æ"):
    out = df.copy()
    if id_col is None or id_col not in out.columns:
        out[new_col] = out[title_col] if title_col in out.columns else out.index.astype(str)
        return out
    titles = out[title_col] if (title_col and title_col in out.columns) else out[id_col].astype(str)
    urls = "https://www.youtube.com/watch?v=" + out[id_col].astype(str)
    out[new_col] = [f"<a href='{u}' target='_blank'>{html.escape(str(t))}</a>" for t,u in zip(titles, urls)]
    return out

def html_table(df, cols, escape=False):
    use = [c for c in cols if c in df.columns]
    if not use:
        st.info("–ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."); return
    st.markdown(df[use].to_html(index=False, escape=escape), unsafe_allow_html=True)

# ------------------ Main ------------------
if not file:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç CSV. –ü–æ–¥—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç ¬´–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ - Jan 23 - Aug 25.csv¬ª.")
    st.stop()

df = pd.read_csv(file)
# –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É ¬´–ò–¢–û–ì–û¬ª, —Ç—Ä–∏–º–∏–º –ø—Ä–æ–±–µ–ª—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
df = df[~df.apply(lambda r: r.astype(str).str.contains("–∏—Ç–æ–≥", case=False).any(), axis=1)]
df.columns = [c.strip() for c in df.columns]

C = detect_cols(df)
title_col  = C["title"]
id_col     = C["video_id"]
pub_col    = C["publish_time"]
views_col  = C["views"]
imp_col    = C["impressions"]
ctr_col    = C["ctr"]
avd_col    = C["avd"]
dur_col    = C["duration"]
rev_col    = C["revenue"]
wth_col    = C["watch_time_hours"]

# –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–π (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
if pub_col:
    df[pub_col] = pd.to_datetime(df[pub_col], errors="coerce")
    df = df.sort_values(pub_col, ascending=False)

# –ü—Ä–∏–≤–æ–¥–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
df["AVD_sec"] = df[avd_col].apply(parse_duration_to_seconds) if avd_col else np.nan
df["Dur_sec"] = df[dur_col].apply(parse_duration_to_seconds) if dur_col else np.nan
df["Avg_%_viewed"] = np.where(
    (df["AVD_sec"].notna()) & (df["Dur_sec"].replace(0,np.nan).notna()),
    df["AVD_sec"]/df["Dur_sec"]*100.0, np.nan
)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º N –≤–∏–¥–µ–æ
if pub_col:
    df = df.head(n_videos).copy()

# –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
if pub_col and only_year != "–í—Å–µ –≥–æ–¥—ã":
    year = int(only_year)
    df = df[df[pub_col].dt.year == year]

# –ö–æ–ª–æ–Ω–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π
if id_col: df["YouTube Link"] = "https://www.youtube.com/watch?v=" + df[id_col].astype(str)

# ------------------ KPI (–º–∏–Ω–∏–º—É–º, –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤) ------------------
k = st.columns(5)
if views_col: k[0].metric("Views (sum)", f"{pd.to_numeric(df[views_col], errors='coerce').sum():,.0f}")
if wth_col:   k[1].metric("Watch time (h)", f"{pd.to_numeric(df[wth_col], errors='coerce').sum():,.1f}")
if df["AVD_sec"].notna().any(): k[2].metric("Avg AVD", seconds_to_hhmmss(df["AVD_sec"].mean()))
if ctr_col:
    ctr_vals = pd.to_numeric(df[ctr_col], errors="coerce")
    if ctr_vals.notna().any(): k[3].metric("CTR avg", f"{ctr_vals.mean():.2f}%")
if pub_col: k[4].metric("Videos", f"{len(df):,}")

st.markdown("---")

# ===================== –¢–ê–ë–õ–ò–¶–´ =====================

# 1) –ú–ò–ö–° –ü–û –ì–û–î–ê–ú (–∫–∞–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ: —Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ + —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –≥–æ–¥–∞–º)
if show_year_mix and pub_col and views_col:
    st.subheader("–ú–∏–∫—Å –ø–æ –≥–æ–¥–∞–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (Count & Views)")
    tmp = df[[pub_col, views_col]].copy()
    tmp["–ì–æ–¥"] = tmp[pub_col].dt.year
    by_year = tmp.groupby("–ì–æ–¥", as_index=False).agg(
        –í–∏–¥–µ–æ=("–ì–æ–¥", "count"),
        –ü—Ä–æ—Å–º–æ—Ç—Ä—ã=(views_col, lambda s: pd.to_numeric(s, errors="coerce").sum())
    ).sort_values("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", ascending=False)
    html_table(by_year, ["–ì–æ–¥","–í–∏–¥–µ–æ","–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"])
    if show_charts:
        c1, c2 = st.columns(2)
        c1.plotly_chart(px.bar(by_year, x="–ì–æ–¥", y="–í–∏–¥–µ–æ", title="–ö–æ–ª-–≤–æ –≤–∏–¥–µ–æ –ø–æ –≥–æ–¥–∞–º"), use_container_width=True)
        c2.plotly_chart(px.bar(by_year, x="–ì–æ–¥", y="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", title="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –≥–æ–¥–∞–º"), use_container_width=True)
    st.caption("–ò–¥–µ—è –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: –æ—Ü–µ–Ω–∏—Ç—å –≤–∫–ª–∞–¥ —Å—Ç–∞—Ä—ã—Ö/–Ω–æ–≤—ã—Ö –≥–æ–¥–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.")

# 2) –õ–û–ö–û–ú–û–¢–ò–í–´ (–¢–û–ü –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º) ‚Äî —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
if show_locom and views_col:
    st.subheader(f"–õ–æ–∫–æ–º–æ—Ç–∏–≤—ã –∫–∞–Ω–∞–ª–∞ ‚Äî –¢–û–ü-{top_k} –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º")
    top_df = df.sort_values(pd.to_numeric(df[views_col], errors="coerce"), ascending=False).head(top_k).copy()
    top_df = add_clickable(top_df, title_col, id_col, new_col="–í–∏–¥–µ–æ")
    cols = ["–í–∏–¥–µ–æ"] + [c for c in [id_col, views_col, "AVD_sec", "Avg_%_viewed", "YouTube Link"] if c in top_df.columns or c=="YouTube Link"]
    human = {"AVD_sec":"AVD (—Å–µ–∫)"}
    html_table(top_df.rename(columns=human), cols, escape=False)
    if show_charts:
        fig = px.bar(top_df, x=top_df[title_col] if title_col else top_df[id_col], y=views_col, text=views_col)
        fig.update_traces(textposition="outside"); fig.update_layout(xaxis_tickangle=-35, height=420)
        st.plotly_chart(fig, use_container_width=True)
    st.caption("–†–æ–≤–Ω–æ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: –≤–∏–¥–Ω–æ, —á—Ç–æ —á–∞—Å—Ç—å —Ç–æ–ø–æ–≤ ¬´—É–º–∏—Ä–∞–µ—Ç¬ª, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä—è–¥ ‚Äî —Å–¥–µ–ª–∞–µ–º decay –æ—Ç–¥–µ–ª—å–Ω–æ.")

# 3) –ö–ê–ß–ï–°–¢–í–û (AVD / %–¥–æ—Å–º–æ—Ç—Ä–∞) ‚Äî –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é
if show_quality and df["AVD_sec"].notna().any():
    st.subheader("–ö–∞—á–µ—Å—Ç–≤–æ: —É–¥–µ—Ä–∂–∞–Ω–∏–µ")
    q = df[[c for c in [title_col, id_col, "AVD_sec", "Dur_sec", "Avg_%_viewed", "YouTube Link"] if c]].copy()
    q = add_clickable(q, title_col, id_col, new_col="–í–∏–¥–µ–æ")
    q["AVD (—á—á:–º–º:—Å—Å)"] = q["AVD_sec"].apply(seconds_to_hhmmss)
    q["Dur (—á—á:–º–º:—Å—Å)"] = q["Dur_sec"].apply(seconds_to_hhmmss)
    cols = ["–í–∏–¥–µ–æ"] + [c for c in [id_col, "AVD (—á—á:–º–º:—Å—Å)", "Dur (—á—á:–º–º:—Å—Å)", "Avg_%_viewed", "YouTube Link"] if c in q.columns or c=="YouTube Link"]
    html_table(q, cols, escape=False)
    if show_charts and "Dur_sec" in q.columns:
        fig = px.scatter(df, x="Dur_sec", y="AVD_sec", hover_name=title_col if title_col else id_col,
                         labels={"Dur_sec":"Duration (—Å–µ–∫)", "AVD_sec":"AVD (—Å–µ–∫)"})
        st.plotly_chart(fig, use_container_width=True)
    st.caption("–°–º–æ—Ç—Ä–∏ —Å—Ä–µ–¥–Ω–∏–π AVD –∏ % –¥–æ—Å–º–æ—Ç—Ä–∞ ‚Äî –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä –ø–∞–¥–µ–Ω–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è.")

# 4) CTR & –ü–û–ö–ê–ó–´ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ—Ç—á—ë—Ç–µ)
if show_ctr and ctr_col and imp_col:
    st.subheader("CTR & –ü–æ–∫–∞–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ—Ç—á—ë—Ç–µ)")
    t = df[[c for c in [title_col, id_col, imp_col, ctr_col, views_col, "YouTube Link"] if c]].copy()
    t = add_clickable(t, title_col, id_col, new_col="–í–∏–¥–µ–æ")
    cols = ["–í–∏–¥–µ–æ"] + [c for c in [id_col, imp_col, ctr_col, views_col, "YouTube Link"] if c in t.columns or c=="YouTube Link"]
    html_table(t, cols, escape=False)
    if show_charts:
        fig = px.scatter(df, x=imp_col, y=pd.to_numeric(df[ctr_col], errors="coerce"),
                         hover_name=title_col if title_col else id_col,
                         labels={imp_col:"Impressions", "y":"CTR (%)"})
        st.plotly_chart(fig, use_container_width=True)
    st.caption("–ü–æ –¥–æ–∫—É–º–µ–Ω—Ç—É: —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è CTR –ø–æ –∫–∞–Ω–∞–ª—É –Ω–µ—Ç, –Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π CTR —É –Ω–æ–≤—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ —Å–ª–∞–±—ã–π ‚Äî –≤–∏–¥–Ω–æ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ.")

# 5) –ü–†–û–°–ï–î–ê–Æ–¢ (–Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º)
if show_underperf:
    st.subheader("–ü—Ä–æ—Å–µ–¥–∞—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–∏–∞–Ω—ã (–±—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä)")
    meds = {}
    if views_col: meds["views"] = np.nanmedian(pd.to_numeric(df[views_col], errors="coerce"))
    if ctr_col:   meds["ctr"]   = np.nanmedian(pd.to_numeric(df[ctr_col], errors="coerce"))
    if df["AVD_sec"].notna().any(): meds["avd"] = np.nanmedian(df["AVD_sec"])
    # —Ñ–ª–∞–≥–∏
    bad = df.copy()
    if "avd" in meds:   bad["flag_avd"] = bad["AVD_sec"] < meds["avd"]
    if "ctr" in meds and ctr_col: bad["flag_ctr"] = pd.to_numeric(bad[ctr_col], errors="coerce") < meds["ctr"]
    if "views" in meds and views_col: bad["flag_views"] = pd.to_numeric(bad[views_col], errors="coerce") < meds["views"]
    mask = False
    for c in ["flag_avd","flag_ctr","flag_views"]:
        if c in bad.columns:
            mask = mask | bad[c].fillna(False)
    under = bad[mask] if isinstance(mask, pd.Series) else bad.iloc[0:0]
    if under.empty:
        st.success("‚õ≥ –í—Å—ë –≤—ã—à–µ –∏–ª–∏ –æ–∫–æ–ª–æ –º–µ–¥–∏–∞–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ.")
    else:
        u = add_clickable(under, title_col, id_col, new_col="–í–∏–¥–µ–æ")
        cols = ["–í–∏–¥–µ–æ"] + [x for x in [id_col, views_col, ctr_col, "AVD_sec", "Avg_%_viewed", "YouTube Link"] if x in u.columns or x=="YouTube Link"]
        human = {"AVD_sec":"AVD (—Å–µ–∫)"}
        html_table(u.rename(columns=human), cols, escape=False)
        st.caption("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (Views/CTR/AVD) ‚Äî —ç—Ç–æ ¬´–ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ¬ª –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.")

# ------------------ Footer ------------------
st.markdown("---")
st.caption("–§–æ—Ä–º–∞—Ç –≥–∏–±–∫–∏–π: –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç Impressions/CTR ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è. –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã.")
