import streamlit as st
import pandas as pd
import plotly.express as px

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
st.set_page_config(page_title="YouTube Dashboard üöÄ", layout="wide")

st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"])
num_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 30, 7)

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
metrics_options = {
    "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã": "Views",
    "üìà CTR": "Impressions click-through rate",
    "‚è±Ô∏è AVD (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)": "Average view duration",
    "üé¨ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ": "Duration",
    "üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏": "Subscribers",
    "üí∞ –î–æ—Ö–æ–¥": "Estimated partner revenue"
}
selected_metrics = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:", list(metrics_options.keys()), default=["üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã"])

# ---------- –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ----------
st.markdown("<h1 style='text-align: center;'>üìä YouTube Dashboard üöÄ</h1>", unsafe_allow_html=True)
st.write("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–æ—Ö–æ–¥ –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏.")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ–¥ —Ä–∞–∑–Ω—ã–µ CSV)
    rename_map = {
        "Video ID": "Video ID",
        "External Video ID": "Video ID",
        "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ": "Title",
        "Video title": "Title",
        "–ù–∞–∑–≤–∞–Ω–∏–µ": "Title",
        "Impressions click-through rate": "Impressions click-through rate",
        "CTR": "Impressions click-through rate",
        "Average view duration": "Average view duration",
        "Average Percentage Viewed": "Average Percentage Viewed",
        "Views": "Views",
        "Estimated partner revenue": "Estimated partner revenue",
        "Subscribers": "Subscribers",
        "Duration": "Duration"
    }
    df = df.rename(columns=rename_map)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –≤–∏–¥–µ–æ
    if "Video publish time" in df.columns:
        df = df.sort_values("Video publish time", ascending=False)
    df = df.head(num_videos)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    if "Video ID" in df.columns:
        df["YouTube Link"] = df["Video ID"].apply(lambda x: f"[üîó –û—Ç–∫—Ä—ã—Ç—å](https://www.youtube.com/watch?v={x})")

    # ---- –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ----
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫")
    st.dataframe(df[["Title", "Video ID", "YouTube Link"] + list(metrics_options.values()) if "Title" in df.columns else df])

    # ---- –ì–†–ê–§–ò–ö–ò ----
    if selected_metrics:
        st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
        for metric in selected_metrics:
            col = metrics_options[metric]
            if col in df.columns:
                fig = px.line(
                    df,
                    x="Title",
                    y=col,
                    markers=True,
                    text=col,
                    title=f"{metric} –ø–æ –≤–∏–¥–µ–æ"
                )
                fig.update_traces(textposition="top center")
                fig.update_layout(xaxis_tickangle=-30)
                st.plotly_chart(fig, use_container_width=True)

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
