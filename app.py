# app.py ‚Äî Shell with Top Navbar + Group Analytics ‚Üí Year Mix
# –ù–∞–≤–±–∞—Ä: YouTube Analytics Tools | [Dashboard] [Group Analytics ‚ñº]
# –í Group Analytics –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–Ω–∫—Ç: "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º" (–¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞ + –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# ---------- Page ----------
st.set_page_config(page_title="YouTube Analytics Tools", layout="wide")
st.markdown("""
<style>
/* –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø */
.block-container {padding-top: 1.2rem;}
/* –ª—ë–≥–∫–∏–π —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–ª–µ–≤–∞ */
.yt-brand {font-weight:700; font-size:1.15rem; letter-spacing:.2px;}
.nav-wrap {display:flex; gap:1rem; align-items:center;}
/* –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
h3 {margin-top: .6rem;}
</style>
""", unsafe_allow_html=True)

# ---------- Top "Navbar" ----------
top = st.columns([1.2, 1.8])
with top[0]:
    st.markdown("<div class='yt-brand'>‚ñ∂Ô∏è YouTube Analytics Tools</div>", unsafe_allow_html=True)
with top[1]:
    # –†–∞–¥–∏–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç
    nav = st.radio("",
                   options=["Dashboard", "Group Analytics"],
                   horizontal=True,
                   label_visibility="collapsed")

st.divider()

# ======================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ¬´–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º¬ª)
# ======================================================================
def _norm(s: str) -> str: 
    return s.strip().lower()

MAP = {
    "publish_time": [
        "video publish time","publish time","–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ","–¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏","publish date"
    ],
    "views": ["views","–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"],
}

def find_col(df: pd.DataFrame, names) -> str | None:
    if isinstance(names, str):
        names = [names]
    by_norm = {_norm(c): c for c in df.columns}
    # —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏)
    for n in names:
        if _norm(n) in by_norm:
            return by_norm[_norm(n)]
    # –ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
    for n in names:
        nn = _norm(n)
        for c in df.columns:
            if nn in _norm(c):
                return c
    return None

def detect_columns(df: pd.DataFrame):
    return {"publish_time": find_col(df, MAP["publish_time"]),
            "views": find_col(df, MAP["views"])}

def close_enough(a, b, tol=0.12):
    """–ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ¬±12%)."""
    if pd.isna(a) or pd.isna(b): 
        return False
    base = max(abs(b), 1e-9)
    return abs(a - b) / base <= tol

# ======================================================================
# ROUTES
# ======================================================================

if nav == "Dashboard":
    # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –ø—É—Å—Ç–∞—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    st.sidebar.info("–†–∞–∑–¥–µ–ª **Dashboard** –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ. –ü–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç.")
    # –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.subheader("Dashboard")
    st.info("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞, KPI, —Ç—Ä–µ–Ω–¥—ã –∏ –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã. "
            "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é.")

elif nav == "Group Analytics":
    # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞
    st.sidebar.header("–ì—Ä—É–ø–ø–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑")
    tool = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞", 
                        ["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º (Year Mix)"])

    # ---------------------- YEAR MIX ----------------------
    if tool.startswith("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º"):
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º (Year Mix)")

        # –î–∞–Ω–Ω—ã–µ (–¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ‚Äî –Ω—É–∂–Ω—ã –ø—Ä—è–º–æ —Ç—É—Ç)
        st.sidebar.markdown("### –î–∞–Ω–Ω—ã–µ")
        file = st.sidebar.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"], key="upload_yearmix"
        )
        show_table = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ü–∏—Ñ—Ä–∞–º–∏", value=False)

        if not file:
            st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV ‚Äî –ø–æ—Å—Ç—Ä–æ—é –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≥–æ–¥–∞–º.")
            st.stop()

        # –ß–∏—Ç–∞–µ–º CSV
        df = pd.read_csv(file)
        df.columns = [c.strip() for c in df.columns]

        # —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ '–ò–¢–û–ì–û'
        try:
            df = df[~df.apply(lambda r: r.astype(str).str.contains("–∏—Ç–æ–≥", case=False).any(), axis=1)]
        except Exception:
            pass

        C = detect_columns(df)
        pub_col  = C["publish_time"]
        views_col = C["views"]

        missing = []
        if not (pub_col and pub_col in df.columns): missing.append("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        if not (views_col and views_col in df.columns): missing.append("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
        if missing:
            st.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ: " + ", ".join(missing))
            st.stop()

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        df[pub_col] = pd.to_datetime(df[pub_col], errors="coerce")
        df = df[df[pub_col].notna()].copy()
        df["_views_num"] = pd.to_numeric(df[views_col], errors="coerce")
        df["_year"] = df[pub_col].dt.year

        # –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        views_year = (
            df.groupby("_year", as_index=False)["_views_num"]
              .sum()
              .rename(columns={"_year": "–ì–æ–¥", "_views_num": "–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"})
              .sort_values("–ì–æ–¥")
        )
        count_year = (
            df.groupby("_year", as_index=False)
              .size()
              .rename(columns={"_year": "–ì–æ–¥", "size": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"})
              .sort_values("–ì–æ–¥")
        )

        if views_year.empty or count_year.empty:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≥–æ–¥–∞–º.")
            st.stop()

        # –û–ø–æ—Ä–Ω—ã–π –≥–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        years_list = sorted(views_year["–ì–æ–¥"].dropna().astype(int).unique())
        default_ref = 2024 if 2024 in years_list else int(max(years_list))
        ref_year = st.selectbox("–û–ø–æ—Ä–Ω—ã–π –≥–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏", years_list,
                                index=years_list.index(default_ref))

        # --- –ì–†–ê–§–ò–ö–ò ---
        c1, c2 = st.columns(2)

        fig1 = px.bar(
            views_year, x="–ì–æ–¥", y="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            text="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", template="simple_white"
        )
        fig1.update_traces(marker_color="#4e79a7", texttemplate="%{text:,}", textposition="outside")
        fig1.update_layout(
            title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –≥–æ–¥–∞–º",
            xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            yaxis_title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            showlegend=False, margin=dict(l=10, r=10, t=50, b=10), height=430
        )
        fig1.update_xaxes(type="category", categoryorder="category ascending")
        c1.plotly_chart(fig1, use_container_width=True)

        fig2 = px.bar(
            count_year, x="–ì–æ–¥", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", template="simple_white"
        )
        fig2.update_traces(marker_color="#4e79a7", texttemplate="%{text}", textposition="outside")
        fig2.update_layout(
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ –≥–æ–¥–∞–º",
            xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
            showlegend=False, margin=dict(l=10, r=10, t=50, b=10), height=430
        )
        fig2.update_xaxes(type="category", categoryorder="category ascending")
        c2.plotly_chart(fig2, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é
        if show_table:
            st.markdown("### –¢–∞–±–ª–∏—Ü–∞")
            tbl = pd.merge(views_year, count_year, on="–ì–æ–¥", how="outer").sort_values("–ì–æ–¥")
            st.dataframe(tbl, use_container_width=True)

        # --- –ê–í–¢–û–¢–ï–ö–°–¢ ---
        st.markdown("### üß† –ê–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –¥–∞–Ω–Ω—ã–º")
        vy = dict(zip(views_year["–ì–æ–¥"], views_year["–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"]))
        cy = dict(zip(count_year["–ì–æ–¥"], count_year["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"]))
        ranking = sorted(vy.items(), key=lambda x: x[1], reverse=True)
        ranking_years = [str(int(y)) for y,_ in ranking[:5]]

        older_sum = sum(v for y, v in vy.items() if y < ref_year)
        ref_sum   = vy.get(ref_year, np.nan)
        prev_year = ref_year - 1 if (ref_year - 1) in vy else None
        views_ref = vy.get(ref_year, np.nan)
        views_prev = vy.get(prev_year, np.nan) if prev_year else np.nan
        cnt_ref = cy.get(ref_year, np.nan)
        cnt_prev = cy.get(prev_year, np.nan) if prev_year else np.nan

        parts = []
        parts.append(
            f"–û–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞ ‚Äî **{ref_year}**. –ù–∏–∂–µ ‚Äî —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –≥–æ–¥–∞–º: –≥–¥–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ —Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –≤—ã—à–ª–æ."
        )
        if ranking_years:
            parts.append("–õ–∏–¥–∏—Ä—É—é—Ç –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º: **" + " ‚Üí ".join(ranking_years) + "**.")

        if not pd.isna(ref_sum) and older_sum > ref_sum:
            total_pair = older_sum + ref_sum
            share_old = f" (‚âà{older_sum/total_pair*100:.0f}% –æ—Ç ¬´—Å—Ç–∞—Ä—ã–π+{ref_year}¬ª)" if total_pair>0 else ""
            parts.append(f"**–°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç** (–¥–æ {ref_year}) —Å–æ–±—Ä–∞–ª –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, —á–µ–º {ref_year}-–π –≥–æ–¥{share_old}.")

        frame = [y for y in [2022, 2023, 2024] if y in vy]
        if len(frame) >= 2:
            vals = [vy[y] for y in frame]
            mx, mn = max(vals), min(vals)
            if mx > 0 and (mx - mn) / mx <= 0.15:
                parts.append("–í **2022‚Äì2024** —Å—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–µ—Ä–∂–∞–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (¬±15%).")

        if prev_year and not any(pd.isna(x) for x in [views_ref, views_prev, cnt_ref, cnt_prev]):
            if close_enough(views_ref, views_prev, tol=0.12) and cnt_ref > cnt_prev:
                times = cnt_ref / max(cnt_prev, 1)
                parts.append(
                    f"–ü—Ä–∏ –ø–æ—Ö–æ–∂–µ–º —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É {prev_year} –∏ {ref_year} "
                    f"–≤ {ref_year}-–º –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ (‚âà√ó{times:.1f}), —á—Ç–æ–±—ã —É–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
                )

        if parts:
            for s in parts:
                st.markdown("‚Ä¢ " + s)
        else:
            st.write("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–æ–¥–∞–º–∏.")

# ======================================================================
# –ö–æ–Ω–µ—Ü
# ======================================================================
