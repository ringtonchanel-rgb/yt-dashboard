import streamlit as st
import pandas as pd
import plotly.express as px

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="YouTube Dashboard üöÄ", layout="wide")

st.title("üìä YouTube Dashboard üöÄ")
st.markdown("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–æ—Ö–æ–¥ –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏.")

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é ---
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"])

n_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 50, 10)

# –ú–µ—Ç—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å
metrics_options = {
    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": "Views",
    "CTR": "Impressions click-through rate",
    "AVD (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)": "Average view duration",
    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ": "Duration",
    "–î–æ—Ö–æ–¥": "Estimated partner revenue",
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": "Subscribers",
    "–ü–æ–∫–∞–∑—ã": "Impressions",
    "RPM (–¥–æ—Ö–æ–¥ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)": "RPM"
}
selected_metrics = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:", list(metrics_options.keys()))

show_top = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-5 –≤–∏–¥–µ–æ", value=True)
show_scatter = st.sidebar.checkbox("Scatter-–≥—Ä–∞—Ñ–∏–∫–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫)", value=True)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (—á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–≥—Ä—É–∑–∫–∞—Ö)
    df.columns = [c.strip() for c in df.columns]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è (–≥–∏–±–∫–æ, —á–µ—Ä–µ–∑ if)
    title_col = None
    for col in ["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "Title", "Video title"]:
        if col in df.columns:
            title_col = col
            break

    id_col = None
    for col in ["Video ID", "ID –≤–∏–¥–µ–æ", "Content"]:
        if col in df.columns:
            id_col = col
            break

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∏—Å–ª—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ
    if "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ" in df.columns:
        df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"] = pd.to_datetime(df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"], errors="coerce")
        df = df.sort_values("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", ascending=False)
    df = df.head(n_videos)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    if id_col:
        df["YouTube Link"] = df[id_col].apply(lambda x: f"https://www.youtube.com/watch?v={x}")

    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫")
    base_cols = []
    if title_col: base_cols.append(title_col)
    if id_col: base_cols.append(id_col)
    if "YouTube Link" in df.columns: base_cols.append("YouTube Link")

    st.dataframe(df[base_cols + [metrics_options[m] for m in selected_metrics if metrics_options[m] in df.columns]])

    # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ ---
    for metric in selected_metrics:
        col_name = metrics_options[metric]
        if col_name in df.columns:
            st.subheader(f"{metric} –ø–æ –≤–∏–¥–µ–æ")
            fig = px.bar(
                df,
                x=title_col if title_col else id_col,
                y=col_name,
                text=col_name,
                hover_data=[id_col] if id_col else None
            )
            fig.update_traces(texttemplate='%{text}', textposition='outside')
            fig.update_layout(xaxis_tickangle=-45, height=500)
            st.plotly_chart(fig, use_container_width=True)

    # --- –¢–û–ü-5 –≤–∏–¥–µ–æ ---
    if show_top and selected_metrics:
        st.subheader("üèÜ –¢–û–ü-5 –≤–∏–¥–µ–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º")
        metric = metrics_options[selected_metrics[0]]  # –ø–µ—Ä–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞
        if metric in df.columns:
            top5 = df.sort_values(metric, ascending=False).head(5)
            st.table(top5[[title_col, metric, "YouTube Link"]] if title_col else top5[[id_col, metric, "YouTube Link"]])

    # --- Scatter-–ø–ª–æ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π ---
    if show_scatter and len(selected_metrics) >= 2:
        st.subheader("üîó –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (Scatter)")
        metric_x = metrics_options[selected_metrics[0]]
        metric_y = metrics_options[selected_metrics[1]]
        if metric_x in df.columns and metric_y in df.columns:
            fig = px.scatter(
                df,
                x=metric_x,
                y=metric_y,
                size=metrics_options["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã" in selected_metrics and metrics_options["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"] in df.columns else None,
                color=title_col if title_col else id_col,
                hover_data=[id_col] if id_col else None
            )
            st.plotly_chart(fig, use_container_width=True)

    # --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞–Ω–æ–π ---
    st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞–Ω–æ–π –∫–∞–Ω–∞–ª–∞")
    for metric in selected_metrics:
        col_name = metrics_options[metric]
        if col_name in df.columns:
            median_val = df[col_name].median()
            st.markdown(f"**{metric} (–º–µ–¥–∏–∞–Ω–∞ –ø–æ –≤—ã–±–æ—Ä–∫–µ):** {median_val:.2f}")
