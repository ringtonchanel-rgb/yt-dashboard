# app.py ‚Äî "Amigos Core" (–æ–¥–∏–Ω —ç–∫—Ä–∞–Ω –ø–æ —Ç–≤–æ–µ–º—É –∞–Ω–∞–ª–∏–∑—É)
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import timedelta
import re, html

# -------------------- –°—Ç—Ä–∞–Ω–∏—Ü–∞ --------------------
st.set_page_config(page_title="YouTube Dashboard ‚Äî Amigos Core", layout="wide")
st.markdown("<h1 style='text-align:center'>üìä YouTube Dashboard ‚Äî Amigos Core</h1>", unsafe_allow_html=True)
st.caption("–û–¥–∏–Ω —ç–∫—Ä–∞–Ω: KPI, —Ç–∞–±–ª–∏—Ü–∞, –≤–∫–ª–∞–¥ –ø–æ –≤–∏–¥–µ–æ, –∫–∞—á–µ—Å—Ç–≤–æ (AVD/CTR), –∏ –≤–æ—Ä–æ–Ω–∫–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–≤–æ–µ–º—É –∞–Ω–∞–ª–∏–∑—É.")

# -------------------- –°–∞–π–¥–±–∞—Ä --------------------
st.sidebar.header("‚öôÔ∏è –î–∞–Ω–Ω—ã–µ")
file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio (–í–∏–¥–µ–æ/Content)", type=["csv"])

st.sidebar.header("üéõ –§–∏–ª—å—Ç—Ä—ã")
n_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 300, 40)
search_q = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/ID")
only_shorts = st.sidebar.checkbox("–¢–æ–ª—å–∫–æ Shorts (<60 —Å–µ–∫)", value=False)

st.sidebar.header("üß© –ë–ª–æ–∫–∏ (–≤–∫–ª/–≤—ã–∫–ª)")
show_kpi    = st.sidebar.checkbox("KPI-–ø–ª–∞—à–∫–∏", value=True)
show_table  = st.sidebar.checkbox("–¢–∞–±–ª–∏—Ü–∞ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)", value=True)
show_bar    = st.sidebar.checkbox("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –≤–∏–¥–µ–æ", value=True)
show_quality= st.sidebar.checkbox("–ö–∞—á–µ—Å—Ç–≤–æ: AVD/Duration –∏ CTR/Impressions", value=True)
show_funnel = st.sidebar.checkbox("–í–æ—Ä–æ–Ω–∫–∞ (Impr ‚Üí CTR ‚Üí Views)", value=True)
show_insights = st.sidebar.checkbox("–ú–∏–Ω–∏-–∏–Ω—Å–∞–π—Ç—ã (Top/Under vs –º–µ–¥–∏–∞–Ω–∞)", value=True)

# -------------------- –•–µ–ª–ø–µ—Ä—ã --------------------
def norm(s:str)->str: return s.strip().lower()

METRICS_MAP = {
    "title": ["–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ","title","video title","–Ω–∞–∑–≤–∞–Ω–∏–µ"],
    "video_id": ["video id","external video id","–∫–æ–Ω—Ç–µ–Ω—Ç","content","id –≤–∏–¥–µ–æ","–∏–¥ –≤–∏–¥–µ–æ"],
    "publish_time": ["video publish time","publish time","–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ","–¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"],
    "views": ["views","–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"],
    "impressions": ["impressions","–ø–æ–∫–∞–∑—ã"],
    "ctr": ["impressions click-through rate","ctr","impressions click-through rate (%)","ctr –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ"],
    "avd": ["average view duration","—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"],
    "duration": ["duration","–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å","–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
    "revenue": ["estimated partner revenue","—Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–æ—Ö–æ–¥","—Ä–∞—Å—á—ë—Ç–Ω—ã–π –¥–æ—Ö–æ–¥"],
    "watch_time_hours": ["watch time (hours)","–≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—á–∞—Å—ã)"],
    "unique_viewers": ["unique viewers","—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑—Ä–∏—Ç–µ–ª–∏"],
    "engaged_views": ["engaged views","–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã"],
}

def find_col(df: pd.DataFrame, keys) -> str | None:
    if isinstance(keys,str): keys=[keys]
    by_norm = {norm(c): c for c in df.columns}
    for k in keys:
        nk = norm(k)
        if nk in by_norm: return by_norm[nk]
    for k in keys:
        nk = norm(k)
        for c in df.columns:
            if nk in norm(c): return c
    return None

def detect_cols(df: pd.DataFrame):
    return {k: find_col(df, v) for k,v in METRICS_MAP.items()}

def parse_duration_to_seconds(x):
    if pd.isna(x): return np.nan
    s = str(x).strip()
    if re.fullmatch(r"\d+(\.\d+)?", s):
        try: return float(s)
        except: return np.nan
    parts = s.split(":")
    try:
        parts = [int(p) for p in parts]
        if len(parts)==2: m,s = parts; return m*60+s
        if len(parts)==3: h,m,s = parts; return h*3600+m*60+s
        return np.nan
    except: return np.nan

def seconds_to_hhmmss(x):
    try:
        x = int(round(float(x)))
        return str(timedelta(seconds=x))
    except:
        return ""

def shorten(text, n=40):
    t = "" if text is None else str(text)
    return (t[:n]+"‚Ä¶") if len(t)>n else t

def add_clickable_title(df, title_col, id_col, new_col="–í–∏–¥–µ–æ"):
    out = df.copy()
    if id_col is None or id_col not in out.columns:
        out[new_col] = out[title_col] if title_col in out.columns else out.index.astype(str)
        return out
    titles = out[title_col] if (title_col and title_col in out.columns) else out[id_col].astype(str)
    urls = "https://www.youtube.com/watch?v=" + out[id_col].astype(str)
    out[new_col] = [f"<a href='{u}' target='_blank'>{html.escape(str(t))}</a>" for t,u in zip(titles, urls)]
    return out

def safe_table(df, cols, escape=False):
    use = [c for c in cols if c in df.columns]
    if not use:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."); return
    st.markdown(df[use].to_html(index=False, escape=escape), unsafe_allow_html=True)

# -------------------- –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ --------------------
if not file:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV. –ü–æ–¥—Ö–æ–¥–∏—Ç –≤—ã–≥—Ä—É–∑–∫–∞ ¬´–í–∏–¥–µ–æ/Content¬ª –∏–∑ YouTube Studio (RU/EN ‚Äî –Ω–µ–≤–∞–∂–Ω–æ).")
    st.stop()

df = pd.read_csv(file)
df.columns = [c.strip() for c in df.columns]

C = detect_cols(df)
title_col  = C["title"]
id_col     = C["video_id"]
pub_col    = C["publish_time"]
views_col  = C["views"]
imp_col    = C["impressions"]
ctr_col    = C["ctr"]
avd_col    = C["avd"]
dur_col    = C["duration"]
rev_col    = C["revenue"]
wth_col    = C["watch_time_hours"]
uv_col     = C["unique_viewers"]
eng_col    = C["engaged_views"]

# –¥–∞—Ç–∞ + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
if pub_col:
    df[pub_col] = pd.to_datetime(df[pub_col], errors="coerce")
    df = df.sort_values(pub_col, ascending=False)

# –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
df["__duration_sec__"] = df[dur_col].apply(parse_duration_to_seconds) if dur_col else np.nan
df["__avd_sec__"]      = df[avd_col].apply(parse_duration_to_seconds) if avd_col else np.nan

# –ø–æ–¥—Å–µ—á–∫–∏
if id_col:
    df["YouTube Link"] = "https://www.youtube.com/watch?v=" + df[id_col].astype(str)
if title_col:
    df["__title_short__"] = df[title_col].apply(lambda x: shorten(x, 36))
x_axis = "__title_short__" if title_col else (id_col if id_col else None)

# —Ñ–∏–ª—å—Ç—Ä—ã
df = df.head(n_videos).copy()
if search_q:
    cols_for_search = [c for c in [title_col, id_col] if c]
    if cols_for_search:
        df = df[df[cols_for_search].astype(str).apply(lambda r: search_q.lower() in " ".join(r).lower(), axis=1)]
if only_shorts:
    df = df[df["__duration_sec__"] < 60]

# -------------------- UI: –û–¥–∏–Ω —ç–∫—Ä–∞–Ω --------------------
# KPI
if show_kpi:
    st.subheader("KPI –ø–æ –≤—ã–±–æ—Ä–∫–µ")
    k = st.columns(6)
    if views_col: k[0].metric("Views", f"{df[views_col].sum():,.0f}")
    if wth_col:   k[1].metric("Watch time (h)", f"{df[wth_col].sum():,.1f}")
    if rev_col:   k[2].metric("Revenue ($)", f"{df[rev_col].sum():,.2f}")
    if uv_col:    k[3].metric("Unique viewers", f"{df[uv_col].sum():,.0f}")
    if df["__avd_sec__"].notna().any(): k[4].metric("Avg AVD", seconds_to_hhmmss(df["__avd_sec__"].mean()))
    # –°—Ä–µ–¥–Ω–∏–π CTR (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if ctr_col:
        ctr_vals = pd.to_numeric(df[ctr_col], errors="coerce")
        if ctr_vals.notna().any(): k[5].metric("CTR avg", f"{ctr_vals.mean():.2f}%")

# –¢–∞–±–ª–∏—Ü–∞ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
if show_table:
    st.subheader("–¢–∞–±–ª–∏—Ü–∞ –≤–∏–¥–µ–æ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Üí YouTube)")
    view = add_clickable_title(df, title_col, id_col, new_col="–í–∏–¥–µ–æ")
    cols = ["–í–∏–¥–µ–æ"] + [x for x in [
        id_col, views_col, imp_col, ctr_col, "__avd_sec__", "__duration_sec__", wth_col, rev_col, eng_col, uv_col, "YouTube Link"
    ] if (x in view.columns) or (x=="YouTube Link")]
    human = {"__avd_sec__":"AVD (—Å–µ–∫)","__duration_sec__":"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)"}
    safe_table(view.rename(columns=human), cols, escape=False)

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –≤–∏–¥–µ–æ¬ª
if show_bar and x_axis and views_col:
    st.subheader("–í–∫–ª–∞–¥ –ø–æ –≤–∏–¥–µ–æ: –ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
    fig = px.bar(df, x=x_axis, y=views_col, text=views_col)
    fig.update_traces(textposition="outside")
    fig.update_layout(xaxis_tickangle=-35, height=440, margin=dict(l=8,r=8,t=30,b=20))
    st.plotly_chart(fig, use_container_width=True)

# –ö–∞—á–µ—Å—Ç–≤–æ: AVD/Duration –∏ CTR/Impressions
if show_quality:
    st.subheader("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    c1, c2 = st.columns(2)

    # AVD vs Duration ‚Äî –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ –º–µ—Ç—Ä–∏–∫–∏
    if df["__duration_sec__"].notna().any() and df["__avd_sec__"].notna().any():
        fig1 = px.scatter(
            df, x="__duration_sec__", y="__avd_sec__",
            hover_name=title_col if title_col else id_col,
            labels={"__duration_sec__":"Duration (—Å–µ–∫)", "__avd_sec__":"AVD (—Å–µ–∫)"}
        )
        fig1.update_layout(height=420)
        c1.plotly_chart(fig1, use_container_width=True)
    else:
        c1.info("–ù–µ—Ç AVD/Duration –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

    # CTR vs Impressions ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ü–æ–∫–∞–∑—ã –∏ CTR
    if ctr_col and imp_col:
        fig2 = px.scatter(
            df, x=imp_col, y=pd.to_numeric(df[ctr_col], errors="coerce"),
            hover_name=title_col if title_col else id_col,
            labels={imp_col:"Impressions", "y":"CTR (%)"}
        )
        fig2.update_layout(height=420)
        c2.plotly_chart(fig2, use_container_width=True)
    else:
        c2.info("–ù–µ—Ç CTR/Impressions –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

# –í–æ—Ä–æ–Ω–∫–∞ (Impressions ‚Üí CTR ‚Üí Views)
if show_funnel and imp_col and ctr_col and views_col:
    st.subheader("–í–æ—Ä–æ–Ω–∫–∞: –ü–æ–∫–∞–∑—ã ‚Üí –ö–ª–∏–∫–æ–≤ (CTR) ‚Üí –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
    funnel_df = df[[x for x in [title_col, id_col, imp_col, ctr_col, views_col] if x]].copy()
    # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ CTR (–µ—Å–ª–∏ Studio –Ω–µ –¥–∞—ë—Ç –∫–ª–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é)
    funnel_df["__clicks__"] = pd.to_numeric(funnel_df[ctr_col], errors="coerce").fillna(0) / 100.0 * pd.to_numeric(funnel_df[imp_col], errors="coerce").fillna(0)
    # –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    melt = funnel_df.melt(
        id_vars=[c for c in [title_col, id_col] if c],
        value_vars=[imp_col, "__clicks__", views_col],
        var_name="stage", value_name="value"
    )
    stage_names = {imp_col:"Impressions", "__clicks__":"Clicks (‚âà Impr√óCTR)", views_col:"Views"}
    melt["stage"] = melt["stage"].map(stage_names)
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´—Å—Ä–µ–¥–Ω—é—é¬ª –≤–æ—Ä–æ–Ω–∫—É –ø–æ –≤—ã–±–æ—Ä–∫–µ
    agg = melt.groupby("stage", as_index=False)["value"].sum()
    fig = px.funnel(agg, x="value", y="stage", title="C—É–º–º–∞—Ä–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –ø–æ –≤—ã–±–æ—Ä–∫–µ")
    st.plotly_chart(fig, use_container_width=True)

    # –∏ –º–∏–Ω–∏-—Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–æ–ø-—Ä–æ–ª–∏–∫–∞–º (–ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º)
    topN = st.slider("–°–∫–æ–ª—å–∫–æ —Ä–æ–ª–∏–∫–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ –≤–æ—Ä–æ–Ω–∫–∏:", 5, 30, 10)
    top_f = funnel_df.sort_values(views_col, ascending=False).head(topN)
    top_f_view = add_clickable_title(top_f, title_col, id_col, new_col="–í–∏–¥–µ–æ")
    cols_f = ["–í–∏–¥–µ–æ"] + [c for c in [imp_col, ctr_col, "__clicks__", views_col, "YouTube Link"] if (c in top_f_view.columns) or (c=="YouTube Link")]
    safe_table(top_f_view.rename(columns={"__clicks__":"Clicks (‚âà)"}), cols_f, escape=False)
elif show_funnel:
    st.info("–î–ª—è –≤–æ—Ä–æ–Ω–∫–∏ –Ω—É–∂–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ ¬´–ü–æ–∫–∞–∑—ã/Impressions¬ª –∏ ¬´CTR¬ª + ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä—ã/Views¬ª –≤ —Ñ–∞–π–ª–µ.")

# –ú–∏–Ω–∏-–∏–Ω—Å–∞–π—Ç—ã (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–∏–∞–Ω—ã)
if show_insights:
    st.subheader("–ú–∏–Ω–∏-–∏–Ω—Å–∞–π—Ç—ã (vs –º–µ–¥–∏–∞–Ω–∞)")
    bullets = []
    # –º–µ–¥–∏–∞–Ω—ã
    med = {}
    if views_col: med["views"] = np.nanmedian(pd.to_numeric(df[views_col], errors="coerce"))
    if ctr_col:   med["ctr"]   = np.nanmedian(pd.to_numeric(df[ctr_col], errors="coerce"))
    if "__avd_sec__" in df.columns: med["avd"] = np.nanmedian(df["__avd_sec__"])
    # —Ç–æ–ø/–Ω–∏–∑—ã –ø–æ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    def top_under(series, n=3, largest=True):
        s = pd.to_numeric(series, errors="coerce")
        s = s.dropna()
        if s.empty: return pd.Index([])
        return s.nlargest(n).index if largest else s.nsmallest(n).index

    if views_col:
        idx_top = top_under(df[views_col], 3, True)
        idx_low = top_under(df[views_col], 3, False)
        if len(idx_top)>0:
            names = [shorten(df.iloc[i][title_col] if title_col else df.iloc[i][id_col], 40) for i in idx_top]
            bullets.append(f"üîº Views: –ª–∏–¥–µ—Ä—ã ‚Äî {', '.join(names)}")
        if len(idx_low)>0:
            names = [shorten(df.iloc[i][title_col] if title_col else df.iloc[i][id_col], 40) for i in idx_low]
            bullets.append(f"üîΩ Views: –ø—Ä–æ—Å–µ–¥–∞—é—Ç ‚Äî {', '.join(names)}")
    if ctr_col:
        s = pd.to_numeric(df[ctr_col], errors="coerce")
        idx_top = top_under(s, 3, True); idx_low = top_under(s, 3, False)
        if len(idx_top)>0:
            names = [shorten(df.iloc[i][title_col] if title_col else df.iloc[i][id_col], 40) for i in idx_top]
            bullets.append(f"‚ú® CTR: —Ç–æ–ø ‚Äî {', '.join(names)}")
        if len(idx_low)>0:
            names = [shorten(df.iloc[i][title_col] if title_col else df.iloc[i][id_col], 40) for i in idx_low]
            bullets.append(f"‚ö†Ô∏è CTR: –Ω–∏–∑ ‚Äî {', '.join(names)}")
    if "__avd_sec__" in df.columns and df["__avd_sec__"].notna().any():
        s = df["__avd_sec__"]
        idx_top = top_under(s, 3, True); idx_low = top_under(s, 3, False)
        if len(idx_top)>0:
            names = [shorten(df.iloc[i][title_col] if title_col else df.iloc[i][id_col], 40) for i in idx_top]
            bullets.append(f"üïí AVD: –≤—ã—Å–æ–∫–∏–π ‚Äî {', '.join(names)}")
        if len(idx_low)>0:
            names = [shorten(df.iloc[i][title_col] if title_col else df.iloc[i][id_col], 40) for i in idx_low]
            bullets.append(f"‚è≥ AVD: –Ω–∏–∑–∫–∏–π ‚Äî {', '.join(names)}")
    if bullets:
        for b in bullets: st.write("- " + b)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫).")
