import streamlit as st
import pandas as pd
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="YouTube Dashboard", layout="wide")
st.markdown(
    "<h1 style='text-align: center;'>üìä YouTube Dashboard üöÄ</h1>",
    unsafe_allow_html=True
)
st.write("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–æ—Ö–æ–¥ –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

# –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type="csv")

num_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 30, 7)

# –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
metrics_options = {
    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": ["Views", "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"],
    "CTR": ["Impressions click-through rate", "CTR"],
    "AVD (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)": ["Average view duration", "AVD"],
    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ": ["Duration", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ"],
    "–î–æ—Ö–æ–¥": ["Estimated revenue", "Revenue", "–î–æ—Ö–æ–¥"],
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": ["Subscribers", "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏"]
}

selected_metrics = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:", list(metrics_options.keys()), default=["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ID
    title_col = next((c for c in ["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "Title"] if c in df.columns), None)
    id_col = next((c for c in ["–ö–æ–Ω—Ç–µ–Ω—Ç", "Video ID"] if c in df.columns), None)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–∏–¥–µ–æ
    df = df.tail(num_videos)

    # –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ YouTube
    if id_col:
        df["YouTube Link"] = df[id_col].apply(lambda x: f"https://www.youtube.com/watch?v={x}")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    for metric in selected_metrics:
        found_col = next((c for c in metrics_options[metric] if c in df.columns), None)
        if found_col:
            st.subheader(f"{metric} –ø–æ –≤–∏–¥–µ–æ")
            fig = px.bar(
                df,
                x=title_col if title_col else id_col,
                y=found_col,
                text=found_col,
                hover_data=[id_col] if id_col else None,
                title=metric
            )
            fig.update_traces(texttemplate='%{text}', textposition='outside')
            fig.update_layout(xaxis_tickangle=-30)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning(f"‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∞ ¬´{metric}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ CSV")

    # –¢–∞–±–ª–∏—Ü–∞
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫")
    show_cols = []
    if title_col: show_cols.append(title_col)
    if id_col: show_cols.append(id_col)
    if "YouTube Link" in df.columns: show_cols.append("YouTube Link")

    for m in selected_metrics:
        found_col = next((c for c in metrics_options[m] if c in df.columns), None)
        if found_col:
            show_cols.append(found_col)

    st.dataframe(df[show_cols])
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
