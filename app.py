import streamlit as st
import pandas as pd
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="YouTube Dashboard üöÄ", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä YouTube Dashboard üöÄ")
st.markdown("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"])
n = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 20, 8)

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ" in df.columns:
        df = df[df["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"].notna()]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
    if "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ" in df.columns:
        df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"] = pd.to_datetime(df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"], errors="coerce")
        df = df.sort_values("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", ascending=False)

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –≤–∏–¥–µ–æ
    subset = df.head(n).copy()

    # --- –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ ---
    st.subheader("‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3, col4 = st.columns(4)

    def safe_metric(col, label, column):
        try:
            value = subset[column].iloc[0]
            col.metric(label, f"{value:,}")
        except:
            col.metric(label, "‚Äî")

    safe_metric(col1, "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
    safe_metric(col2, "–ü–æ–∫–∞–∑—ã", "–ü–æ–∫–∞–∑—ã")
    safe_metric(col3, "CTR (%)", "CTR –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)")
    safe_metric(col4, "–°—Ä–µ–¥. –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

    # --- –¢–∞–±–ª–∏—Ü–∞ ---
    st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ")
    st.dataframe(subset)

    # --- –ì—Ä–∞—Ñ–∏–∫–∏ ---
    st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
    available_metrics = ["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "–ü–æ–∫–∞–∑—ã", "CTR –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)", "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"]
    selected_metrics = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", available_metrics, default=["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "CTR –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)"])

    if selected_metrics:
        fig = px.bar(
            subset,
            x="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ",
            y=selected_metrics,
            barmode="group",
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º",
            text_auto=True
        )
        st.plotly_chart(fig, use_container_width=True)

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
