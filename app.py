import streamlit as st
import pandas as pd
import plotly.express as px

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="YouTube Dashboard üöÄ", layout="wide")

st.title("üìä YouTube Dashboard üöÄ")
st.markdown("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–æ—Ö–æ–¥ –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏.")

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é ---
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"])

n_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 50, 10)

# –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
metrics_options = {
    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": ["Views", "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"],
    "CTR": ["Impressions click-through rate", "CTR", "Impressions click-through rate (%)"],
    "AVD (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)": ["Average view duration", "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"],
    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ": ["Duration", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
    "–î–æ—Ö–æ–¥": ["Estimated partner revenue", "–†–∞—Å—á–µ—Ç–Ω—ã–π –¥–æ—Ö–æ–¥"],
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": ["Subscribers", "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏"],
    "–ü–æ–∫–∞–∑—ã": ["Impressions", "–ü–æ–∫–∞–∑—ã"],
    "RPM (–¥–æ—Ö–æ–¥ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)": ["RPM", "–î–æ—Ö–æ–¥ –∑–∞ 1000 –ø–æ–∫–∞–∑–æ–≤"]
}

selected_metrics = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:", list(metrics_options.keys()))
show_top = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-5 –≤–∏–¥–µ–æ", value=True)
show_scatter = st.sidebar.checkbox("Scatter-–≥—Ä–∞—Ñ–∏–∫–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫)", value=True)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df.columns = [c.strip() for c in df.columns]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ID
    title_col = next((c for c in ["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "Title", "Video title"] if c in df.columns), None)
    id_col = next((c for c in ["Video ID", "ID –≤–∏–¥–µ–æ", "Content"] if c in df.columns), None)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ" in df.columns:
        df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"] = pd.to_datetime(df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"], errors="coerce")
        df = df.sort_values("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", ascending=False)

    df = df.head(n_videos)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
    if id_col:
        df["YouTube Link"] = df[id_col].apply(lambda x: f"https://www.youtube.com/watch?v={x}")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ (–≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫)
    def find_col(possible_names):
        for name in possible_names:
            for col in df.columns:
                if name.lower() in col.lower():
                    return col
        return None

    # –¢–∞–±–ª–∏—Ü–∞
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫")
    base_cols = [c for c in [title_col, id_col, "YouTube Link"] if c]
    metric_cols = []
    for metric in selected_metrics:
        col_name = find_col(metrics_options[metric])
        if col_name:
            metric_cols.append(col_name)

    if base_cols + metric_cols:
        st.dataframe(df[base_cols + metric_cols])

    # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    for metric in selected_metrics:
        col_name = find_col(metrics_options[metric])
        if col_name:
            st.subheader(f"{metric} –ø–æ –≤–∏–¥–µ–æ")
            fig = px.bar(
                df,
                x=title_col if title_col else id_col,
                y=col_name,
                text=col_name,
                hover_data=[id_col] if id_col else None
            )
            fig.update_traces(texttemplate='%{text}', textposition='outside')
            fig.update_layout(xaxis_tickangle=-45, height=500)
            st.plotly_chart(fig, use_container_width=True)

    # –¢–û–ü-5
    if show_top and selected_metrics:
        st.subheader("üèÜ –¢–û–ü-5 –≤–∏–¥–µ–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º")
        col_name = find_col(metrics_options[selected_metrics[0]])
        if col_name:
            top5 = df.sort_values(col_name, ascending=False).head(5)
            st.table(top5[[title_col, col_name, "YouTube Link"]] if title_col else top5[[id_col, col_name, "YouTube Link"]])

    # Scatter
    if show_scatter and len(selected_metrics) >= 2:
        st.subheader("üîó –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (Scatter)")
        col_x = find_col(metrics_options[selected_metrics[0]])
        col_y = find_col(metrics_options[selected_metrics[1]])
        if col_x and col_y:
            fig = px.scatter(
                df,
                x=col_x,
                y=col_y,
                size=find_col(metrics_options["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"]),
                color=title_col if title_col else id_col,
                hover_data=[id_col] if id_col else None
            )
            st.plotly_chart(fig, use_container_width=True)
