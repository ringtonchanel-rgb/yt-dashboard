# app.py ‚Äî Year Mix Only (–¥–≤–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≥–æ–¥–∞–º: —Å—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –∫–æ–ª-–≤–æ –≤–∏–¥–µ–æ)

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# ---------- Page ----------
st.set_page_config(page_title="YouTube Dashboard ‚Äî Year Mix", layout="wide")
st.markdown("<h1 style='text-align:center'>üìä YouTube Dashboard ‚Äî –ì–æ–¥–æ–≤–æ–π –º–∏–∫—Å</h1>", unsafe_allow_html=True)
st.caption("–û–¥–∏–Ω —ç–∫—Ä–∞–Ω ‚Ä¢ –ì–æ–¥–æ–≤–æ–π –º–∏–∫—Å: —Å—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –≥–æ–¥–∞–º + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ –≥–æ–¥–∞–º.")

# ---------- Sidebar ----------
st.sidebar.header("‚öôÔ∏è –î–∞–Ω–Ω—ã–µ")
file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio (–∫–∞–∫ ¬´–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ - Jan 23 - Aug 25.csv¬ª)", type=["csv"]
)
show_table = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ü–∏—Ñ—Ä–∞–º–∏", value=False)

# ---------- Helpers ----------
def _norm(s: str) -> str:
    return s.strip().lower()

# –ö–∞—Ä—Ç–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ (—Ä—É—Å/–∞–Ω–≥–ª/–≤–∞—Ä–∏–∞–Ω—Ç—ã)
MAP = {
    "publish_time": [
        "video publish time", "publish time", "–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", "–¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "publish date",
    ],
    "views": [
        "views", "–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
    ],
}

def find_col(df: pd.DataFrame, names) -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É –≤ df –ø–æ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä, –ø—Ä–æ–±–µ–ª—ã –∏ –≤—Ö–æ–∂–¥–µ–Ω–∏—è)."""
    if isinstance(names, str):
        names = [names]
    by_norm = {_norm(c): c for c in df.columns}
    # 1) —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏)
    for n in names:
        nn = _norm(n)
        if nn in by_norm:
            return by_norm[nn]
    # 2) –ø–æ–¥—Å—Ç—Ä–æ–∫–∞
    for n in names:
        nn = _norm(n)
        for c in df.columns:
            if nn in _norm(c):
                return c
    return None

def detect_columns(df: pd.DataFrame):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã."""
    return {
        "publish_time": find_col(df, MAP["publish_time"]),
        "views": find_col(df, MAP["views"]),
    }

# ---------- Main ----------
if not file:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, –∏ —è –ø–æ—Å—Ç—Ä–æ—é –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º. –ü–æ–¥—Ö–æ–¥–∏—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ YouTube Studio.")
    st.stop()

# –ß–∏—Ç–∞–µ–º CSV
df = pd.read_csv(file)
# –ß–∏–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
df.columns = [c.strip() for c in df.columns]

# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–≥—Ä—É–∑–∫–∞—Ö –≤ –∫–æ–Ω—Ü–µ –±—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∞ ¬´–ò–¢–û–ì–û¬ª ‚Äî —É–±–µ—Ä—ë–º –µ—ë –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
try:
    df = df[~df.apply(lambda r: r.astype(str).str.contains("–∏—Ç–æ–≥", case=False).any(), axis=1)]
except Exception:
    pass

# –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏
C = detect_columns(df)
pub_col  = C["publish_time"]
views_col = C["views"]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
missing = []
if not (pub_col and pub_col in df.columns):
    missing.append("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
if not (views_col and views_col in df.columns):
    missing.append("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")

if missing:
    st.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ: " + ", ".join(missing))
    st.stop()

# –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫ datetime
df[pub_col] = pd.to_datetime(df[pub_col], errors="coerce")
# –§–∏–ª—å—Ç—Ä—É–µ–º —è–≤–Ω—ã–µ NaT
df = df[df[pub_col].notna()].copy()

# –ß–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
df["_views_num"] = pd.to_numeric(df[views_col], errors="coerce")

# –ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
df["_year"] = df[pub_col].dt.year

# –ê–≥—Ä–µ–≥–∞—Ü–∏–∏
views_year = (
    df.groupby("_year", as_index=False)["_views_num"]
      .sum()
      .rename(columns={"_year": "–ì–æ–¥", "_views_num": "–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"})
      .sort_values("–ì–æ–¥")
)

count_year = (
    df.groupby("_year", as_index=False)
      .size()
      .rename(columns={"_year": "–ì–æ–¥", "size": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"})
      .sort_values("–ì–æ–¥")
)

# –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
if views_year.empty or count_year.empty:
    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≥–æ–¥–∞–º.")
    st.stop()

# ---------- –ì—Ä–∞—Ñ–∏–∫–∏ ----------
c1, c2 = st.columns(2)

# –õ–ï–í–´–ô: —Å—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –≥–æ–¥–∞–º
fig1 = px.bar(
    views_year,
    x="–ì–æ–¥",
    y="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
    text="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
    template="simple_white",
)
fig1.update_traces(marker_color="#4e79a7", texttemplate="%{text:,}", textposition="outside")
fig1.update_layout(
    title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –≥–æ–¥–∞–º",
    xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
    yaxis_title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
    showlegend=False,
    margin=dict(l=10, r=10, t=50, b=10),
    height=430,
)
fig1.update_xaxes(type="category", categoryorder="category ascending")
c1.plotly_chart(fig1, use_container_width=True)

# –ü–†–ê–í–´–ô: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ –≥–æ–¥–∞–º
fig2 = px.bar(
    count_year,
    x="–ì–æ–¥",
    y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
    text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
    template="simple_white",
)
fig2.update_traces(marker_color="#4e79a7", texttemplate="%{text}", textposition="outside")
fig2.update_layout(
    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ –≥–æ–¥–∞–º",
    xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
    showlegend=False,
    margin=dict(l=10, r=10, t=50, b=10),
    height=430,
)
fig2.update_xaxes(type="category", categoryorder="category ascending")
c2.plotly_chart(fig2, use_container_width=True)

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¢–∞–±–ª–∏—Ü–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏
if show_table:
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞")
    tbl = pd.merge(views_year, count_year, on="–ì–æ–¥", how="outer").sort_values("–ì–æ–¥")
    st.dataframe(tbl, use_container_width=True)
