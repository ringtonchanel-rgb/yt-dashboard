import streamlit as st
import pandas as pd
import plotly.express as px

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="YouTube Dashboard üöÄ", layout="wide")

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.markdown(
    """
    <h1 style="display: flex; align-items: center;">
        üìä YouTube Dashboard üöÄ
    </h1>
    <p>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</p>
    """,
    unsafe_allow_html=True
)

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"])
n = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 20, 7)

# –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
show_views = st.sidebar.checkbox("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", value=True)
show_ctr = st.sidebar.checkbox("üìà CTR", value=False)
show_avd = st.sidebar.checkbox("‚è±Ô∏è AVD (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)", value=False)
show_duration = st.sidebar.checkbox("üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ", value=False)
show_table = st.sidebar.checkbox("üìä –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫", value=True)

# --- –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω ---
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", –µ—Å–ª–∏ –µ—Å—Ç—å
    if "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ" in df.columns:
        df = df[df["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"].notna()]

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ" in df.columns:
        df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"] = pd.to_datetime(df["–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"], errors="coerce")
        df = df.sort_values("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", ascending=False)

    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –≤–∏–¥–µ–æ
    df = df.head(n).copy()

    # –¥–µ–ª–∞–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    df["–ù–∞–∑–≤–∞–Ω–∏–µ (—Å–æ–∫—Ä.)"] = df["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"].apply(
        lambda x: x[:40] + "..." if len(str(x)) > 40 else x
    )

    # --- –ú–µ—Ç—Ä–∏–∫–∏ ---
    if show_views and "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã" in df.columns:
        st.subheader("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –≤–∏–¥–µ–æ")
        fig = px.bar(
            df,
            x="–ù–∞–∑–≤–∞–Ω–∏–µ (—Å–æ–∫—Ä.)",
            y="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã",
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã",
            hover_data={"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ": True, "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": True},
        )
        fig.update_traces(textposition="outside")
        fig.update_layout(xaxis_tickangle=-30, height=500)
        st.plotly_chart(fig, use_container_width=True)

    if show_ctr and "CTR –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)" in df.columns:
        st.subheader("üìà CTR –ø–æ –≤–∏–¥–µ–æ")
        fig = px.bar(
            df,
            x="–ù–∞–∑–≤–∞–Ω–∏–µ (—Å–æ–∫—Ä.)",
            y="CTR –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)",
            text="CTR –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)",
            hover_data={"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ": True},
        )
        fig.update_traces(textposition="outside")
        fig.update_layout(xaxis_tickangle=-30, height=500)
        st.plotly_chart(fig, use_container_width=True)

    if show_avd and "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞" in df.columns:
        st.subheader("‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        fig = px.bar(
            df,
            x="–ù–∞–∑–≤–∞–Ω–∏–µ (—Å–æ–∫—Ä.)",
            y="–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            text="–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            hover_data={"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ": True},
        )
        fig.update_traces(textposition="outside")
        fig.update_layout(xaxis_tickangle=-30, height=500)
        st.plotly_chart(fig, use_container_width=True)

    if show_duration and "–†–∞—Å—á—ë—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥—ã)" in df.columns:
        st.subheader("üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (—Å–µ–∫—É–Ω–¥—ã)")
        fig = px.bar(
            df,
            x="–ù–∞–∑–≤–∞–Ω–∏–µ (—Å–æ–∫—Ä.)",
            y="–†–∞—Å—á—ë—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥—ã)",
            text="–†–∞—Å—á—ë—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥—ã)",
            hover_data={"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ": True},
        )
        fig.update_traces(textposition="outside")
        fig.update_layout(xaxis_tickangle=-30, height=500)
        st.plotly_chart(fig, use_container_width=True)

    if show_table:
        st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫")
        st.dataframe(df, use_container_width=True)

# --- –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ---
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
