# Core imports
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import io
import zipfile

# Local imports
from utils import create_sparkline  # Add import for sparkline function
from youtube_api import YouTubeAPI
from database import db

# Page config with auto-refresh
st.set_page_config(
    page_title="YouTube Analytics",
    page_icon="üìä",
    layout="wide"
)

# Initialize API
api = YouTubeAPI()

# Title and description
st.title("üìä YouTube Analytics Dashboard")
st.markdown("–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ YouTube-–∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

# Sidebar - Channel Management
with st.sidebar:
    st.header("üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")

    # Add new channel
    new_channel = st.text_input(
        "ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
        help="–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ YouTube –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://youtube.com/c/ChannelName)"
    )

    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"):
        if new_channel:
            channel_info = api.get_channel_info(new_channel)
            if channel_info:
                db.add_channel(channel_info['id'], channel_info['title'])
                st.success(f"–ö–∞–Ω–∞–ª '{channel_info['title']}' –¥–æ–±–∞–≤–ª–µ–Ω!")
                st.rerun()
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ —Å—Å—ã–ª–∫–∏.")

    # List of channels
    st.subheader("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã")
    channels = db.get_channels()

    if channels:
        for channel in channels:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"üì∫ {channel['title']}")
            with col2:
                if st.button("‚ùå", key=f"delete_{channel['channel_id']}"):
                    db.remove_channel(channel['channel_id'])
                    st.rerun()
    else:
        st.info("–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")


# Create tabs for different analysis views
tab1, tab2 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞", "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"])

with tab1:
    # Main content
    if channels:
        # Channel selector
        selected_channel = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            options=[c['channel_id'] for c in channels],
            format_func=lambda x: next(c['title'] for c in channels if c['channel_id'] == x)
        )

        if selected_channel:
            # Get videos
            videos = api.get_channel_videos(selected_channel)

            if videos:
                last_update = datetime.now()
                st.success(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(videos)} –≤–∏–¥–µ–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update.strftime('%H:%M:%S')})")

                # Show video statistics
                for video in videos:
                    # Main content area
                    with st.container():
                        col1, col2 = st.columns([1.5, 1])  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å [2, 1] –Ω–∞ [1.5, 1]

                        with col1:
                            # Show current thumbnail
                            if 'thumbnails' in video:
                                for quality in ['maxres', 'standard', 'high', 'medium', 'default']:
                                    if quality in video['thumbnails']:
                                        st.image(video['thumbnails'][quality]['url'], use_container_width=True)
                                        break

                        with col2:
                            # Get views history
                            views_history = db.get_video_views_history(video['id'])
                            if views_history:
                                try:
                                    # Create sparkline
                                    fig_sparkline = create_sparkline(views_history, width=200, height=60)
                                    if fig_sparkline:
                                        st.plotly_chart(fig_sparkline, use_container_width=True)
                                except Exception as e:
                                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞: {str(e)}")

                                # Create full chart
                                df = pd.DataFrame(views_history)
                                df['timestamp'] = pd.to_datetime(df['timestamp'])
                                df['views'] = pd.to_numeric(df['views'])
                                df = df.sort_values('timestamp')

                                fig = px.line(
                                    df,
                                    x='timestamp',
                                    y='views',
                                    title="–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                                    labels={
                                        'timestamp': '–í—Ä–µ–º—è',
                                        'views': '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'
                                    }
                                )

                                # Configure layout
                                fig.update_layout(
                                    showlegend=False,
                                    height=400,
                                    margin=dict(l=20, r=20, t=30, b=20),
                                    plot_bgcolor='white',
                                    paper_bgcolor='white',
                                    xaxis=dict(
                                        showgrid=True,
                                        gridcolor='lightgray',
                                        title=None,
                                        tickformat='%d.%m %H:%M'
                                    ),
                                    yaxis=dict(
                                        showgrid=True,
                                        gridcolor='lightgray',
                                        title='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
                                        rangemode='nonnegative',  # Ensure y-axis starts from 0
                                        range=[0, None]  # Force y-axis to start at 0
                                    )
                                )
                                st.plotly_chart(fig, use_container_width=True)
                            else:
                                st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

                    # Metrics section below main content
                    st.write("")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
                    metrics_cols = st.columns([1, 1, 1])
                    with metrics_cols[0]:
                        st.metric("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã", f"{video['statistics']['viewCount']:,}")
                    with metrics_cols[1]:
                        st.metric("üëç –õ–∞–π–∫–∏", f"{video['statistics']['likeCount']:,}")
                    with metrics_cols[2]:
                        st.metric("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", f"{video['statistics']['commentCount']:,}")

                    # Detailed information in expander
                    with st.expander(f"üì∫ {video['title']}", expanded=False):
                        # Create tabs for different types of analysis
                        metadata_tab, comments_tab = st.tabs(["üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"])

                        with metadata_tab:
                            # Metadata section
                            st.subheader("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
                            st.write(f"**–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {video['published_at'].strftime('%d.%m.%Y %H:%M')}")
                            st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:**")
                            st.text(video['description'][:500] + "..." if len(video['description']) > 500 else video['description'])

                            if video.get('tags'):
                                st.write("**–¢–µ–≥–∏:**")
                                st.write(", ".join(video['tags']))

                            # Thumbnail history section
                            metadata = db.get_video_metadata(video['id'])
                            if metadata and metadata.get('thumbnail_history'):
                                st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±–ª–æ–∂–∫–∏")
                                for thumbnail in metadata['thumbnail_history']:
                                    st.image(thumbnail['url'], use_container_width=True)
                                    st.caption(f"–ò–∑–º–µ–Ω–µ–Ω–æ: {thumbnail['changed_at'].strftime('%d.%m.%Y %H:%M')}")

                            # Title history section
                            if metadata and metadata.get('title_history'):
                                st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è")
                                for title_change in metadata['title_history']:
                                    st.write(f"**{title_change['changed_at'].strftime('%d.%m.%Y %H:%M')}:** {title_change['title']}")

                        with comments_tab:
                            # Comments analysis
                            comment_analysis = db.analyze_comments(video['id'])
                            if comment_analysis['stats']['total_comments'] > 0:
                                # General statistics
                                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                                stats_cols = st.columns(4)
                                with stats_cols[0]:
                                    st.metric("–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", comment_analysis['stats']['total_comments'])
                                with stats_cols[1]:
                                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤", comment_analysis['stats']['unique_authors'])
                                with stats_cols[2]:
                                    st.metric("–°—Ä–µ–¥–Ω–µ–µ –ª–∞–π–∫–æ–≤", f"{comment_analysis['stats']['avg_likes']:.1f}")
                                with stats_cols[3]:
                                    st.metric("–ú–∞–∫—Å–∏–º—É–º –ª–∞–π–∫–æ–≤", comment_analysis['stats']['max_likes'])

                                # Top authors
                                st.subheader("üë• –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤")
                                authors_df = pd.DataFrame(comment_analysis['top_authors'])
                                st.dataframe(
                                    authors_df,
                                    column_config={
                                        "author": "–ê–≤—Ç–æ—Ä",
                                        "comments_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                                        "total_likes": "–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤"
                                    },
                                    hide_index=True
                                )

                                # Top comments
                                st.subheader("üîù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
                                for comment in comment_analysis['top_comments']:
                                    with st.container():
                                        st.markdown(f"**{comment['author']}** ‚Ä¢ {comment['likes']} üëç")
                                        st.write(comment['text'])
                                        st.write(f"*{comment['published_at'].strftime('%d.%m.%Y %H:%M')}*")
                                        st.divider()
                            else:
                                st.info("–£ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

                    st.divider()

                # Analytics sections
                st.header("üìä –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                publishing_analysis = db.analyze_optimal_publishing_time()
                if publishing_analysis['hourly_stats']:
                    best_hours = publishing_analysis['best_hours']
                    st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                    for hour in best_hours:
                        st.write(f"**{hour}:00** - —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

                    hourly_df = pd.DataFrame(publishing_analysis['hourly_stats'])

                    fig_views = px.bar(
                        hourly_df,
                        x='hour',
                        y='avg_views_24h',
                        title="–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                        labels={'hour': '–ß–∞—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', 'avg_views_24h': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'}
                    )
                    fig_views.update_layout(xaxis=dict(tickmode='linear', tick0=0, dtick=1))
                    st.plotly_chart(fig_views, use_container_width=True)
                    fig_published = px.bar(
                        hourly_df,
                        x='hour',
                        y='videos_published',
                        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –ø–æ —á–∞—Å–∞–º",
                        labels={'hour': '–ß–∞—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', 'videos_published': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ'}
                    )
                    fig_published.update_layout(xaxis=dict(tickmode='linear', tick0=0, dtick=1))
                    st.plotly_chart(fig_published, use_container_width=True)
                else:
                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

                # Export section
                st.header("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
                export_container = st.container()
                with export_container:
                    st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞:")

                    col1, col2, col3 = st.columns(3)

                    # Prepare export data
                    export_data = db.get_channel_export_data(selected_channel)
                    channel_name = next(c['title'] for c in channels if c['channel_id'] == selected_channel)
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
                    filename_base = f"{channel_name}_{timestamp}"

                    with col1:
                        if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                            # Prepare CSV data
                            # Videos data
                            videos_df = pd.DataFrame(export_data['videos'])
                            videos_df['tags'] = videos_df['tags'].apply(lambda x: ', '.join(x) if x else '')

                            # Stats data
                            stats_df = pd.DataFrame(export_data['channel_stats'])

                            # Create a buffer for ZIP file
                            zip_buffer = io.BytesIO()
                            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zf:
                                # Add videos data
                                videos_csv = videos_df.to_csv(index=False)
                                zf.writestr(f'videos_{filename_base}.csv', videos_csv)

                                # Add stats data
                                stats_csv = stats_df.to_csv(index=False)
                                zf.writestr(f'stats_{filename_base}.csv', stats_csv)

                                # Add channel info
                                channel_info_df = pd.DataFrame([export_data['channel_info']])
                                channel_csv = channel_info_df.to_csv(index=False)
                                zf.writestr(f'channel_info_{filename_base}.csv', channel_csv)

                            zip_buffer.seek(0)
                            st.download_button(
                                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
                                data=zip_buffer,
                                file_name=f"{filename_base}_export.zip",
                                mime="application/zip"
                            )

                    with col2:
                        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
                            # Prepare Excel data
                            buffer = io.BytesIO()
                            excel_writer = pd.ExcelWriter(buffer, engine='openpyxl')
                            with excel_writer:
                                # Channel info sheet
                                pd.DataFrame([export_data['channel_info']]).to_excel(
                                    excel_writer, sheet_name='Channel Info', index=False
                                )

                                # Videos sheet
                                videos_df = pd.DataFrame(export_data['videos'])
                                videos_df['tags'] = videos_df['tags'].apply(lambda x: ', '.join(x) if x else '')
                                videos_df.to_excel(excel_writer, sheet_name='Videos', index=False)

                                # Channel stats sheet
                                stats_df = pd.DataFrame(export_data['channel_stats'])
                                stats_df.to_excel(excel_writer, sheet_name='Channel Stats', index=False)

                                # Add sheets for each video's detailed data
                                for video in export_data['videos']:
                                    # Views history
                                    if video['views_history']:
                                        views_df = pd.DataFrame(video['views_history'])
                                        sheet_name = f"Views_{video['video_id'][-6:]}"
                                        views_df.to_excel(writer, sheet_name=sheet_name, index=False)

                                    # Top comments
                                    if video['top_comments']:
                                        comments_df = pd.DataFrame(video['top_comments'])
                                        sheet_name = f"Comments_{video['video_id'][-6:]}"
                                        comments_df.to_excel(writer, sheet_name=sheet_name, index=False)

                            buffer.seek(0)
                            st.download_button(
                                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
                                data=buffer,
                                file_name=f"{filename_base}.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )

                    with col3:
                        if st.button("üîÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"):
                            # Prepare JSON data with proper formatting
                            formatted_data = {
                                'channel_info': export_data['channel_info'],
                                'export_info': {
                                    'timestamp': datetime.now().isoformat(),
                                    'format_version': '1.0'
                                },
                                'videos': [{
                                    **video,
                                    'tags': list(video['tags']) if video['tags'] else [],
                                    'views_history': [
                                        {
                                            'timestamp': hist['timestamp'].isoformat(),
                                            'views': hist['views']
                                        } for hist in video['views_history']
                                    ] if video['views_history'] else [],
                                    'top_comments': [
                                        {
                                            **comment,
                                            'published_at': comment['published_at'].isoformat()
                                        } for comment in video['top_comments']
                                    ] if video['top_comments'] else []
                                } for video in export_data['videos']],
                                'channel_stats': [{
                                    **stat,
                                    'date': stat['date'].isoformat()
                                } for stat in export_data['channel_stats']]
                            }

                            json_str = json.dumps(formatted_data, ensure_ascii=False, indent=2)
                            st.download_button(
                                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å JSON",
                                data=json_str,
                                file_name=f"{filename_base}.json",
                                mime="application/json"
                            )

                st.header("üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                growth_stats = db.get_channel_growth_stats(selected_channel)
                if growth_stats:
                    growth_df = pd.DataFrame(growth_stats)

                    fig_total = px.line(
                        growth_df,
                        x='date',
                        y='total_views',
                        title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –¥–Ω—è–º",
                        labels={'date': '–î–∞—Ç–∞', 'total_views': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'}
                    )
                    st.plotly_chart(fig_total, use_container_width=True)

                    fig_growth = px.bar(
                        growth_df,
                        x='date',
                        y='views_growth',
                        title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                        labels={'date': '–î–∞—Ç–∞', 'views_growth': '–ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'}
                    )
                    st.plotly_chart(fig_growth, use_container_width=True)

                    # Video comparison
                    st.subheader("üÜö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ")
                    video_options = {f"{v['title']} ({v['statistics']['viewCount']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)": v['id'] for v in videos}
                    selected_videos = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                        options=list(video_options.keys()),
                        max_selections=5
                    )

                    if selected_videos:
                        video_ids = [video_options[title] for title in selected_videos]
                        comparison = db.compare_videos(video_ids)
                        if comparison:
                            comparison_df = pd.DataFrame(comparison)

                            # –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                            fig_growth = px.bar(
                                comparison_df,
                                x='title',
                                y='growth_per_hour',
                                title="–°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                                labels={
                                    'title': '–í–∏–¥–µ–æ',
                                    'growth_per_hour': '–ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —á–∞—Å'
                                }
                            )
                            fig_growth.update_layout(
                                xaxis_tickangle=-45,
                                height=400,
                                margin=dict(l=20, r=20, t=40, b=100)
                            )
                            st.plotly_chart(fig_growth, use_container_width=True)

                            # –ì—Ä–∞—Ñ–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                            fig_engagement = px.bar(
                                comparison_df,
                                x='title',
                                y='engagement_rate',
                                title="–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã)",
                                labels={
                                    'title': '–í–∏–¥–µ–æ',
                                    'engagement_rate': '–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏'
                                }
                            )
                            fig_engagement.update_layout(
                                xaxis_tickangle=-45,
                                height=400,
                                margin=dict(l=20, r=20, t=40, b=100)
                            )
                            st.plotly_chart(fig_engagement, use_container_width=True)

                            # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                            st.write("**–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ:**")
                            st.dataframe(
                                comparison_df,
                                column_config={
                                    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                                    "published_at": "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                                    "max_views": "–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                                    "views_growth": "–ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                                    "growth_per_hour": "–ü—Ä–∏—Ä–æ—Å—Ç –≤ —á–∞—Å",
                                    "comments_count": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                                    "avg_comment_likes": "–°—Ä. –ª–∞–π–∫–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                    "engagement_rate": "–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å, %",
                                    "tags_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤"
                                },
                                hide_index=True
                            )

                st.header("üìù –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π")
                title_stats = db.get_title_performance()
                if title_stats:
                    title_df = pd.DataFrame(title_stats)
                    fig_words = px.bar(
                        title_df.head(10),
                        x='word',
                        y='avg_views',
                        title="–¢–æ–ø-10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º",
                        labels={'word': '–°–ª–æ–≤–æ', 'avg_views': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'}
                    )
                    st.plotly_chart(fig_words, use_container_width=True)

                    st.write("**–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:**")
                    st.dataframe(
                        title_df,
                        column_config={
                            "word": "–°–ª–æ–≤–æ",
                            "usage_count": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π",
                            "avg_views": "–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                            "min_views": "–ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                            "max_views": "–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
                        }
                    )
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ")
        else:
            st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        st.info("üëà –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é")

with tab2:
    st.header("üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤")

    # Channel selection for comparison
    available_channels = {c['title']: c['channel_id'] for c in channels}
    selected_channels = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
        options=list(available_channels.keys()),
        max_selections=5
    )

    if len(selected_channels) > 1:
        channel_ids = [available_channels[title] for title in selected_channels]

        # Basic comparison
        comparison = db.compare_channels(channel_ids)
        if comparison:
            comparison_df = pd.DataFrame(comparison)

            # Videos in 30 days
            fig_videos = px.bar(
                comparison_df,
                x='channel_title',
                y='–ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å 1 —Ñ–µ–≤—Ä–∞–ª—è',
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å 1 —Ñ–µ–≤—Ä–∞–ª—è",
                labels={
                    'channel_title': '–ö–∞–Ω–∞–ª',
                    '–ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å 1 —Ñ–µ–≤—Ä–∞–ª—è': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ'
                }
            )
            st.plotly_chart(fig_videos, use_container_width=True)

            # Views of new videos
            fig_new_views = px.bar(
                comparison_df,
                x='channel_title',
                y='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ',
                title="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å 1 —Ñ–µ–≤—Ä–∞–ª—è",
                labels={
                    'channel_title': '–ö–∞–Ω–∞–ª',
                    '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
                }
            )
            st.plotly_chart(fig_new_views, use_container_width=True)

            # Total views in 30 days
            fig_total = px.bar(
                comparison_df,
                x='channel_title',
                y='–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
                title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                labels={
                    'channel_title': '–ö–∞–Ω–∞–ª',
                    '–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
                }
            )
            st.plotly_chart(fig_total, use_container_width=True)

            # Detailed statistics table
            st.write("**–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:**")
            st.dataframe(
                comparison_df.drop('channel_id', axis=1),
                hide_index=True
            )
        else:
            st.info("""
            –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:
            1. –í—ã–±–µ—Ä–∏—Ç–µ 2 –∏–ª–∏ –±–æ–ª–µ–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
            2. –°—Ä–∞–≤–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å 1 —Ñ–µ–≤—Ä–∞–ª—è
            3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ
            4. –û—Ü–µ–Ω–∏—Ç–µ –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
            """)