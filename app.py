import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import io, re, hashlib

# =========================
# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =========================
USE_EMOJI = True
ICON_DASH  = "üìä " if USE_EMOJI else ""
ICON_GROUP = "üß© " if USE_EMOJI else ""
ICON_BRAND = "üì∫ " if USE_EMOJI else ""

st.set_page_config(page_title="YouTube Analytics Tools", layout="wide")

st.sidebar.markdown(
    f"<div style='font-weight:700;font-size:1.05rem;letter-spacing:.1px;'>{ICON_BRAND}YouTube Analytics Tools</div>",
    unsafe_allow_html=True,
)
st.sidebar.divider()

nav = st.sidebar.radio(
    "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
    options=[f"{ICON_DASH}Dashboard", f"{ICON_GROUP}Group Analytics"],
    label_visibility="visible",
)

st.sidebar.divider()

# =========================
# –£—Ç–∏–ª–∏—Ç—ã
# =========================
def _norm(s: str) -> str:
    return str(s).strip().lower()

MAP = {
    "publish_time": [
        "video publish time","publish time","–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ","–¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏","publish date"
    ],
    "views": ["views","–ø—Ä–æ—Å–º–æ—Ç—Ä—ã","–ø—Ä–æ—Å–º—Ç–æ—Ä—ã","–ø—Ä–æ—Å–º–æ—Ç—Ä—ã (views)"],
    "impressions": ["impressions","–ø–æ–∫–∞–∑—ã","–ø–æ–∫–∞–∑—ã (impressions)","–ø–æ–∫–∞–∑—ã –∑–Ω–∞—á–∫–æ–≤","–ø–æ–∫–∞–∑—ã –¥–ª—è –∑–Ω–∞—á–∫–æ–≤"],
    "ctr": [
        "impressions click-through rate","ctr","ctr (%)",
        "ctr for thumbnails (%)","ctr –¥–ª—è –∑–Ω–∞—á–∫–æ–≤","ctr –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ (%)",
        "ctr –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ (%)","ctr –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ","ctr –≤–∏–¥–µ–æ"
    ],
    "avd": [
        "average view duration","avg view duration",
        "—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        "—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ",
        "average view duration (hh:mm:ss)"
    ],
    "title": ["title","–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ","video title","–≤–∏–¥–µ–æ","–Ω–∞–∑–≤–∞–Ω–∏–µ"],
}

def find_col(df: pd.DataFrame, names) -> str | None:
    if isinstance(names, str):
        names = [names]
    by_norm = {_norm(c): c for c in df.columns}
    for n in names:
        nn = _norm(n)
        if nn in by_norm:
            return by_norm[nn]
    for n in names:
        nn = _norm(n)
        for c in df.columns:
            if nn in _norm(c):
                return c
    return None

def detect_columns(df: pd.DataFrame):
    return {k: find_col(df, v) for k, v in MAP.items()}

def to_number(x):
    if x is None:
        return np.nan
    if isinstance(x, (int, float, np.number)):
        return float(x)
    s = str(x).strip()
    if s == "" or s.lower() in {"none","nan"}:
        return np.nan
    s = s.replace(" ", "").replace("\u202f","").replace("\xa0","")
    is_percent = s.endswith("%")
    if is_percent:
        s = s[:-1]
    if "," in s and "." not in s:
        s = s.replace(",", ".")
    try:
        val = float(s)
        return val if not is_percent else val
    except Exception:
        return np.nan

def parse_duration_to_seconds(x):
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return np.nan
    if isinstance(x, (int, float, np.number)):
        return float(x)
    s = str(x).strip()
    if s == "":
        return np.nan
    m = re.match(r"^(\d+):(\d{2}):(\d{2})$", s)
    if m:
        h, m_, s_ = map(int, m.groups())
        return h*3600 + m_*60 + s_
    m = re.match(r"^(\d+):(\d{2})$", s)
    if m:
        m_, s_ = map(int, m.groups())
        return m_*60 + s_
    try:
        return float(s)
    except Exception:
        return np.nan

def seconds_to_hhmmss(sec):
    if pd.isna(sec):
        return "‚Äî"
    sec = int(round(sec))
    h = sec // 3600
    m = (sec % 3600) // 60
    s = sec % 60
    return f"{h}:{m:02d}:{s:02d}" if h else f"{m}:{s:02d}"

def read_csv_safely(uploaded_file) -> pd.DataFrame | None:
    try:
        return pd.read_csv(uploaded_file)
    except Exception:
        try:
            if hasattr(uploaded_file, "getvalue"):
                data = uploaded_file.getvalue()
            else:
                data = uploaded_file.read()
            return pd.read_csv(io.BytesIO(data), encoding="utf-8-sig")
        except Exception:
            try:
                return pd.read_csv(io.BytesIO(data), encoding="cp1251")
            except Exception:
                return None

def file_hash(uploaded_file) -> str:
    """–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—ç—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–µ-–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏."""
    if hasattr(uploaded_file, "getvalue"):
        raw = uploaded_file.getvalue()
    else:
        raw = uploaded_file.read()
    return hashlib.md5(raw).hexdigest()

# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ state: groups = [ {"name": str, "files": [ {"name": str, "hash": str, "df": DataFrame, "meta": str} ] } ]
if "groups" not in st.session_state:
    st.session_state["groups"] = []

def all_hashes() -> set[str]:
    hs = set()
    for g in st.session_state["groups"]:
        for f in g["files"]:
            hs.add(f["hash"])
    return hs

def kpis_for_group(group) -> dict:
    total_impr = 0.0
    total_views = 0.0
    ctr_values = []
    avd_vals_sec = []
    for f in group["files"]:
        df = f["df"]
        C = detect_columns(df)
        if C["impressions"] and C["impressions"] in df.columns:
            impr = pd.to_numeric(df[C["impressions"]].apply(to_number), errors="coerce").fillna(0)
            total_impr += float(impr.sum())
        if C["views"] and C["views"] in df.columns:
            views = pd.to_numeric(df[C["views"]].apply(to_number), errors="coerce").fillna(0)
            total_views += float(views.sum())
        if C["ctr"] and C["ctr"] in df.columns:
            ctr_col = df[C["ctr"]].apply(to_number)
            ctr_values.extend(list(ctr_col.dropna().values))
        if C["avd"] and C["avd"] in df.columns:
            avd_sec = df[C["avd"]].apply(parse_duration_to_seconds)
            avd_vals_sec.extend(list(avd_sec.dropna().values))
    avg_ctr = float(np.nanmean(ctr_values)) if ctr_values else np.nan
    avg_avd_sec = float(np.nanmean(avd_vals_sec)) if avd_vals_sec else np.nan
    return dict(
        impressions=int(total_impr),
        views=int(total_views),
        ctr=avg_ctr,
        avd_sec=avg_avd_sec
    )

def concat_groups(groups_idx: list[int]) -> pd.DataFrame:
    """–°—à–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ –æ–¥–∏–Ω df."""
    frames = []
    for idx in groups_idx:
        if idx < 0 or idx >= len(st.session_state["groups"]):
            continue
        for f in st.session_state["groups"][idx]["files"]:
            frames.append(f["df"])
    if not frames:
        return pd.DataFrame()
    return pd.concat(frames, ignore_index=True)

# =========================
# DASHBOARD
# =========================
if nav.endswith("Dashboard"):
    st.header("Dashboard")

    # ----------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã -----------
    with st.sidebar.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        group_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–∫–∞–Ω–∞–ª–∞)", value=f"Group {len(st.session_state['groups'])+1}")
        files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV (–≤—Å–µ —Ç–∏–ø—ã –æ—Ç—á—ë—Ç–æ–≤ YouTube Studio)",
            type=["csv"],
            accept_multiple_files=True,
            key="add_group_files",
        )
        add_btn = st.button("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")

        if add_btn:
            if not group_name.strip():
                st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
            elif not files:
                st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω CSV.")
            else:
                known = all_hashes()
                new_files = []
                skipped = 0
                for f in files:
                    h = file_hash(f)
                    if h in known:
                        skipped += 1
                        continue
                    df = read_csv_safely(f)
                    if df is None or df.empty:
                        continue
                    df.columns = [c.strip() for c in df.columns]
                    new_files.append({"name": f.name, "hash": h, "df": df, "meta": f"‚úÖ {f.name}: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫."})
                    known.add(h)
                if new_files:
                    st.session_state["groups"].append({"name": group_name.strip(), "files": new_files})
                    if skipped:
                        st.info(f"–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: {skipped}.")
                    else:
                        st.success("–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                    st.experimental_rerun()
                else:
                    st.error("–ù–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –¥—É–±–ª–∏).")

    # ----------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ -----------
    if not st.session_state["groups"]:
        st.info("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –≤ —Å–∞–π–¥–±–∞—Ä–µ.")
    else:
        st.markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
        for gi, g in enumerate(st.session_state["groups"]):
            with st.expander(f"–ì—Ä—É–ø–ø–∞: {g['name']}", expanded=False):
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=g["name"], key=f"rename_{gi}")
                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", key=f"save_name_{gi}"):
                    g["name"] = new_name.strip() if new_name.strip() else g["name"]
                    st.success("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
                    st.experimental_rerun()

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –≥—Ä—É–ø–ø—É
                add_more = st.file_uploader(
                    "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É",
                    type=["csv"],
                    accept_multiple_files=True,
                    key=f"append_files_{gi}"
                )
                if st.button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã", key=f"append_btn_{gi}"):
                    if not add_more:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã.")
                    else:
                        known = all_hashes()
                        added, skipped = 0, 0
                        for f in add_more:
                            h = file_hash(f)
                            if h in known:
                                skipped += 1
                                continue
                            df = read_csv_safely(f)
                            if df is None or df.empty():
                                continue
                            df.columns = [c.strip() for c in df.columns]
                            g["files"].append({"name": f.name, "hash": h, "df": df, "meta": f"‚úÖ {f.name}: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫."})
                            known.add(h)
                            added += 1
                        if added:
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {added}. –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: {skipped}.")
                            st.experimental_rerun()
                        else:
                            st.info("–ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã).")

                # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è
                st.markdown("**–§–∞–π–ª—ã –≥—Ä—É–ø–ø—ã:**")
                if not g["files"]:
                    st.write("‚Äî –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
                else:
                    for fi, f in enumerate(g["files"]):
                        c1, c2 = st.columns([4,1])
                        with c1:
                            st.write(f["meta"])
                        with c2:
                            if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_file_{gi}_{fi}"):
                                g["files"].pop(fi)
                                st.experimental_rerun()

                st.divider()
                # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                col_del1, col_del2 = st.columns([1,5])
                with col_del1:
                    if st.button("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", key=f"del_group_{gi}"):
                        st.session_state["groups"].pop(gi)
                        st.experimental_rerun()

        st.divider()

        # ----------- KPI –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ -----------
        st.markdown("### –°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º")
        kpi_rows = []
        for gi, g in enumerate(st.session_state["groups"]):
            kp = kpis_for_group(g)
            st.subheader(f"–ì—Ä—É–ø–ø–∞: {g['name']}")
            c1, c2, c3, c4 = st.columns(4)
            c1.metric("–ü–æ–∫–∞–∑—ã (—Å—É–º–º–∞)", f"{kp['impressions']:,}".replace(",", " "))
            c2.metric("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã (—Å—É–º–º–∞)", f"{kp['views']:,}".replace(",", " "))
            ctr_txt = "‚Äî" if np.isnan(kp["ctr"]) else f"{kp['ctr']:.2f}%"
            avd_txt = seconds_to_hhmmss(kp["avd_sec"])
            c3.metric("–°—Ä–µ–¥–Ω–∏–π CTR –ø–æ –≤–∏–¥–µ–æ", ctr_txt)
            c4.metric("–°—Ä–µ–¥–Ω–∏–π AVD", avd_txt)

            kpi_rows.append({
                "–ì—Ä—É–ø–ø–∞": g["name"],
                "–ü–æ–∫–∞–∑—ã": kp["impressions"],
                "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": kp["views"],
                "CTR, % (—Å—Ä–µ–¥–Ω–µ–µ)": None if np.isnan(kp["ctr"]) else round(kp["ctr"], 2),
                "AVD (—Å—Ä.)": avd_txt
            })
            st.divider()

        if kpi_rows:
            st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø")
            comp_df = pd.DataFrame(kpi_rows)
            st.dataframe(comp_df, use_container_width=True, hide_index=True)

# =========================
# GROUP ANALYTICS
# =========================
else:
    st.header("Group Analytics")
    tool = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞", ["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º (Year Mix)"])

    if tool.startswith("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º"):
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º (Year Mix)")

        source_mode = st.sidebar.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", ["–ì—Ä—É–ø–ø—ã –∏–∑ Dashboard", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã"])

        # ---- –ò—Å—Ç–æ—á–Ω–∏–∫: –≥—Ä—É–ø–ø—ã
        if source_mode == "–ì—Ä—É–ø–ø—ã –∏–∑ Dashboard":
            if not st.session_state["groups"]:
                st.info("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Dashboard.")
                st.stop()
            # –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø
            group_names = [g["name"] for g in st.session_state["groups"]]
            selected = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø", group_names, default=group_names[:1])
            if not selected:
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É.")
                st.stop()
            idxs = [group_names.index(n) for n in selected]
            df = concat_groups(idxs)

        # ---- –ò—Å—Ç–æ—á–Ω–∏–∫: –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
        else:
            up_files = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)", type=["csv"], accept_multiple_files=True, key="ga_upload")
            df_list = []
            if up_files:
                for f in up_files:
                    d = read_csv_safely(f)
                    if d is not None and not d.empty:
                        d.columns = [c.strip() for c in d.columns]
                        df_list.append(d)
            if not df_list:
                st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω CSV.")
                st.stop()
            df = pd.concat(df_list, ignore_index=True)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –≥—Ä—É–ø–ø—É?
            save_opt = st.sidebar.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø—É")
            if save_opt:
                choice = st.sidebar.radio("–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", ["–í —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"])
                if choice == "–í —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É":
                    if not st.session_state["groups"]:
                        st.warning("–ù–µ—Ç –≥—Ä—É–ø–ø. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é¬ª.")
                    else:
                        names = [g["name"] for g in st.session_state["groups"]]
                        gi = st.sidebar.selectbox("–ì—Ä—É–ø–ø–∞", list(range(len(names))), format_func=lambda i: names[i])
                        if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            known = all_hashes()
                            added, skipped = 0, 0
                            for f in up_files:
                                h = file_hash(f)
                                if h in known:
                                    skipped += 1
                                    continue
                                d = read_csv_safely(f)
                                if d is None or d.empty:
                                    continue
                                d.columns = [c.strip() for c in d.columns]
                                st.session_state["groups"][gi]["files"].append({"name": f.name, "hash": h, "df": d, "meta": f"‚úÖ {f.name}: {d.shape[0]} —Å—Ç—Ä–æ–∫, {d.shape[1]} –∫–æ–ª–æ–Ω–æ–∫."})
                                known.add(h)
                                added += 1
                            if added:
                                st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {added}. –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: {skipped}.")
                                st.experimental_rerun()
                else:
                    new_name = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã", value=f"GA Group {len(st.session_state['groups'])+1}")
                    if st.sidebar.button("–°–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                        known = all_hashes()
                        new_files = []
                        for f in up_files:
                            h = file_hash(f)
                            if h in known:
                                continue
                            d = read_csv_safely(f)
                            if d is None or d.empty:
                                continue
                            d.columns = [c.strip() for c in d.columns]
                            new_files.append({"name": f.name, "hash": h, "df": d, "meta": f"‚úÖ {f.name}: {d.shape[0]} —Å—Ç—Ä–æ–∫, {d.shape[1]} –∫–æ–ª–æ–Ω–æ–∫."})
                            known.add(h)
                        if new_files:
                            st.session_state["groups"].append({"name": new_name.strip() or "New Group", "files": new_files})
                            st.success("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞.")
                            st.experimental_rerun()

        # --- –¥–∞–ª—å—à–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ Year Mix –∫–∞–∫ –ø—Ä–µ–∂–¥–µ ---
        # —É–¥–∞–ª–∏–º —è–≤–Ω—ã–µ "–ò—Ç–æ–≥–∏" –µ—Å–ª–∏ –±—ã–ª–∏ —Å–ª–∏—Ç—ã
        try:
            df = df[~df.apply(lambda r: r.astype(str).str.contains("–∏—Ç–æ–≥", case=False).any(), axis=1)]
        except Exception:
            pass

        C = detect_columns(df)
        pub_col  = C["publish_time"]
        views_col = C["views"]

        missing = []
        if not (pub_col and pub_col in df.columns): missing.append("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        if not (views_col and views_col in df.columns): missing.append("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
        if missing:
            st.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö: " + ", ".join(missing))
            st.stop()

        df[pub_col] = pd.to_datetime(df[pub_col], errors="coerce")
        df = df[df[pub_col].notna()].copy()
        df["_views_num"] = pd.to_numeric(df[views_col].apply(to_number), errors="coerce")
        df["_year"] = df[pub_col].dt.year

        views_year = (df.groupby("_year", as_index=False)["_views_num"]
                        .sum()
                        .rename(columns={"_year":"–ì–æ–¥","_views_num":"–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"})
                        .sort_values("–ì–æ–¥"))
        count_year = (df.groupby("_year", as_index=False)
                        .size()
                        .rename(columns={"_year":"–ì–æ–¥","size":"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"})
                        .sort_values("–ì–æ–¥"))

        if views_year.empty or count_year.empty:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≥–æ–¥–∞–º.")
            st.stop()

        years_list = sorted(views_year["–ì–æ–¥"].dropna().astype(int).unique())
        default_ref = 2024 if 2024 in years_list else int(max(years_list))
        ref_year = st.selectbox("–û–ø–æ—Ä–Ω—ã–π –≥–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏", years_list,
                                index=years_list.index(default_ref))

        c1, c2 = st.columns(2)
        fig1 = px.bar(views_year, x="–ì–æ–¥", y="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                      text="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", template="simple_white")
        fig1.update_traces(marker_color="#4e79a7", texttemplate="%{text:,}", textposition="outside")
        fig1.update_layout(title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –≥–æ–¥–∞–º",
                           xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                           yaxis_title="–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                           showlegend=False, margin=dict(l=10,r=10,t=50,b=10), height=430)
        fig1.update_xaxes(type="category", categoryorder="category ascending")
        c1.plotly_chart(fig1, use_container_width=True)

        fig2 = px.bar(count_year, x="–ì–æ–¥", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", template="simple_white")
        fig2.update_traces(marker_color="#4e79a7", texttemplate="%{text}", textposition="outside")
        fig2.update_layout(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ –≥–æ–¥–∞–º",
                           xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                           yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
                           showlegend=False, margin=dict(l=10,r=10,t=50,b=10), height=430)
        fig2.update_xaxes(type="category", categoryorder="category ascending")
        c2.plotly_chart(fig2, use_container_width=True)

        st.markdown("### üß† –ê–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        vy = dict(zip(views_year["–ì–æ–¥"], views_year["–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"]))
        cy = dict(zip(count_year["–ì–æ–¥"], count_year["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"]))

        ranking = sorted(vy.items(), key=lambda x: x[1], reverse=True)
        ranking_years = [str(int(y)) for y,_ in ranking[:5]]

        older_sum = sum(v for y,v in vy.items() if y < ref_year)
        ref_sum   = vy.get(ref_year, np.nan)
        prev_year = ref_year - 1 if (ref_year - 1) in vy else None
        views_ref = vy.get(ref_year, np.nan)
        views_prev = vy.get(prev_year, np.nan) if prev_year else np.nan
        cnt_ref = cy.get(ref_year, np.nan)
        cnt_prev = cy.get(prev_year, np.nan) if prev_year else np.nan

        def close_enough(a, b, tol=0.12):
            if pd.isna(a) or pd.isna(b): return False
            base = max(abs(b), 1e-9)
            return abs(a - b)/base <= tol

        parts = []
        parts.append(f"–û–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞ ‚Äî **{ref_year}**.")
        if ranking_years:
            parts.append("–õ–∏–¥–∏—Ä—É—é—Ç –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º: **" + " ‚Üí ".join(ranking_years) + "**.")
        if not pd.isna(ref_sum) and older_sum > ref_sum:
            total_pair = older_sum + ref_sum
            share_old = f" (‚âà{older_sum/total_pair*100:.0f}% –æ—Ç ¬´—Å—Ç–∞—Ä—ã–π+{ref_year}¬ª)" if total_pair>0 else ""
            parts.append(f"**–°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç** (–¥–æ {ref_year}) —Å–æ–±—Ä–∞–ª –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, —á–µ–º {ref_year}-–π –≥–æ–¥{share_old}.")
        frame = [y for y in [2022, 2023, 2024] if y in vy]
        if len(frame) >= 2:
            vals = [vy[y] for y in frame]
            mx, mn = max(vals), min(vals)
            if mx>0 and (mx-mn)/mx <= 0.15:
                parts.append("–í **2022‚Äì2024** —Å—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–µ—Ä–∂–∞–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (¬±15%).")
        if prev_year and not any(pd.isna(x) for x in [views_ref,views_prev,cnt_ref,cnt_prev]):
            if close_enough(views_ref, views_prev, 0.12) and cnt_ref>cnt_prev:
                times = cnt_ref/max(cnt_prev,1)
                parts.append(f"–ü—Ä–∏ –±–ª–∏–∑–∫–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö —É {prev_year} –∏ {ref_year} –≤ {ref_year}-–º –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ (‚âà√ó{times:.1f}).")

        if parts:
            for s in parts: st.markdown("‚Ä¢ " + s)
        else:
            st.write("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.")
