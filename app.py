import streamlit as st
import pandas as pd
import plotly.express as px

# -------------------- –°—Ç—Ä–∞–Ω–∏—Ü–∞ --------------------
st.set_page_config(page_title="YouTube Dashboard üöÄ", layout="wide")
st.markdown("<h1 style='text-align:center'>üìä YouTube Dashboard üöÄ</h1>", unsafe_allow_html=True)
st.write("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube-–∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, CTR, —É–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–æ—Ö–æ–¥ –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏.")

# -------------------- –°–∞–π–¥–±–∞—Ä ---------------------
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–∑ YouTube Studio", type=["csv"])
n_videos = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:", 3, 50, 10)

# –ú–µ—Ç—Ä–∏–∫–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫, RU/EN)
METRICS_MAP = {
    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": ["views", "–ø—Ä–æ—Å–º–æ—Ç—Ä—ã"],
    "CTR": ["impressions click-through rate", "ctr", "impressions click-through rate (%)", "ctr –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤–∏–¥–µ–æ"],
    "AVD (—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)": ["average view duration", "—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"],
    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ": ["duration", "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
    "–î–æ—Ö–æ–¥": ["estimated partner revenue", "—Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–æ—Ö–æ–¥", "—Ä–∞—Å—á—ë—Ç–Ω—ã–π –¥–æ—Ö–æ–¥"],
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": ["subscribers", "–ø–æ–¥–ø–∏—Å—á–∏–∫–∏"],
    "–ü–æ–∫–∞–∑—ã": ["impressions", "–ø–æ–∫–∞–∑—ã"],
    "RPM (–¥–æ—Ö–æ–¥ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)": ["rpm", "–¥–æ—Ö–æ–¥ –∑–∞ 1000 –ø–æ–∫–∞–∑–æ–≤", "–¥–æ—Ö–æ–¥ –Ω–∞ —Ç—ã—Å—è—á—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"]
}
# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∏–º ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä—ã¬ª, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞
selected_metrics = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:",
    list(METRICS_MAP.keys()),
    default=["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"]
)

show_top = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-5 –≤–∏–¥–µ–æ", value=True)
show_scatter = st.sidebar.checkbox("Scatter-–≥—Ä–∞—Ñ–∏–∫–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫)", value=True)

# -------------------- –£—Ç–∏–ª–∏—Ç—ã ---------------------
def normalize(s: str) -> str:
    return s.strip().lower()

def find_col(df: pd.DataFrame, possible_names: list[str]) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ df, –µ—Å–ª–∏ –æ–Ω–∞ ¬´–ø–æ—Ö–æ–∂–∞¬ª –Ω–∞ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ possible_names.
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ –∏ –ø–æ ¬´–≤—Ö–æ–∂–¥–µ–Ω–∏—é¬ª (contains).
    """
    if df is None or df.empty:
        return None
    cols_norm = {normalize(c): c for c in df.columns}
    # –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for pname in possible_names:
        pn = normalize(pname)
        if pn in cols_norm:
            return cols_norm[pn]
    # contains
    for pname in possible_names:
        pn = normalize(pname)
        for c in df.columns:
            if pn in normalize(c):
                return c
    return None

def detect_title_and_id(df: pd.DataFrame) -> tuple[str|None, str|None]:
    title_col = find_col(df, ["–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "title", "video title", "–Ω–∞–∑–≤–∞–Ω–∏–µ"])
    id_col    = find_col(df, ["video id", "external video id", "–∫–æ–Ω—Ç–µ–Ω—Ç", "content", "id –≤–∏–¥–µ–æ"])
    return title_col, id_col

def shorten(text: str, n: int = 40) -> str:
    t = str(text) if text is not None else ""
    return (t[:n] + "‚Ä¶") if len(t) > n else t

# -------------------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---------------------
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    df.columns = [c.strip() for c in df.columns]

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    title_col, id_col = detect_title_and_id(df)

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    publish_col = find_col(df, ["–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", "video publish time", "publish time", "–¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])
    if publish_col:
        df[publish_col] = pd.to_datetime(df[publish_col], errors="coerce")
        df = df.sort_values(publish_col, ascending=False)

    # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
    df = df.head(n_videos).copy()

    # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –µ—Å–ª–∏ –µ—Å—Ç—å ID
    if id_col:
        df_link_col = "YouTube Link"
        df[df_link_col] = df[id_col].apply(lambda x: f"https://www.youtube.com/watch?v={x}")
    else:
        df_link_col = None

    # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å
    base_cols = []
    if title_col and title_col in df.columns: base_cols.append(title_col)
    if id_col and id_col in df.columns:       base_cols.append(id_col)
    if df_link_col and df_link_col in df.columns: base_cols.append(df_link_col)

    # –Ω–∞–π–¥—ë–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    metric_cols = []
    for m in selected_metrics:
        col = find_col(df, METRICS_MAP[m])
        if col and col not in metric_cols:
            metric_cols.append(col)

    # ---- –¢–∞–±–ª–∏—Ü–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ) ----
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫")
    available_cols = [c for c in (base_cols + metric_cols) if c in df.columns]
    if available_cols:
        st.dataframe(df[available_cols], use_container_width=True)
    else:
        st.warning("–ù–µ –Ω–∞—à—ë–ª –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª –∏ –≤—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫).")

    # ---- –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º ----
    # –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–µ–π —Å–¥–µ–ª–∞–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if title_col and title_col in df.columns:
        df["__title_short__"] = df[title_col].apply(lambda x: shorten(x, 38))
        x_axis = "__title_short__"
    elif id_col and id_col in df.columns:
        x_axis = id_col
    else:
        x_axis = None  # –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–µ —Å—Ç—Ä–æ–∏–º –±–µ–∑ –æ—Å–∏ X

    if x_axis:
        for m in selected_metrics:
            y_col = find_col(df, METRICS_MAP[m])
            if y_col:
                st.subheader(f"{m} –ø–æ –≤–∏–¥–µ–æ")
                fig = px.bar(
                    df,
                    x=x_axis,
                    y=y_col,
                    text=y_col,
                    hover_data=[id_col] if id_col else None,
                )
                fig.update_traces(texttemplate="%{text}", textposition="outside", cliponaxis=False)
                fig.update_layout(xaxis_tickangle=-35, height=480, margin=dict(l=10, r=10, t=40, b=10))
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info(f"–ú–µ—Ç—Ä–∏–∫–∞ ¬´{m}¬ª –≤ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")
    else:
        st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—Å–∏ X (–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–∏ ID). –¢–∞–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞.")

    # ---- –¢–û–ü-5 –≤–∏–¥–µ–æ –ø–æ –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ ----
    if show_top and selected_metrics:
        first_metric_col = find_col(df, METRICS_MAP[selected_metrics[0]])
        if first_metric_col:
            st.subheader("üèÜ –¢–û–ü-5 –≤–∏–¥–µ–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ")
            top5 = df.sort_values(first_metric_col, ascending=False).head(5)
            cols_to_show = [c for c in [title_col, id_col, df_link_col, first_metric_col] if c and c in top5.columns]
            st.table(top5[cols_to_show])
        else:
            st.info("–î–ª—è –¢–û–ü-5 –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–æ–Ω–∫—É –ø–æ –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ.")

    # ---- Scatter: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–µ—Ç—Ä–∏–∫ ----
    if show_scatter and len(selected_metrics) >= 2:
        col_x = find_col(df, METRICS_MAP[selected_metrics[0]])
        col_y = find_col(df, METRICS_MAP[selected_metrics[1]])
        if col_x and col_y:
            st.subheader("üîó –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (Scatter)")
            size_col = find_col(df, METRICS_MAP["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"])
            fig = px.scatter(
                df,
                x=col_x,
                y=col_y,
                size=size_col if size_col else None,
                color=df[title_col] if title_col else (df[id_col] if id_col else None),
                hover_name=df[title_col] if title_col else None,
                hover_data=[id_col] if id_col else None,
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–î–ª—è Scatter –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ –º–µ—Ç—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ.")

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –∏–∑ YouTube Studio, –∑–∞—Ç–µ–º –≤–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–µ–≤–∞.")
