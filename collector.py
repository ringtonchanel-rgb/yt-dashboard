import time
from youtube_api import YouTubeAPI
from database import db
from datetime import datetime, timedelta

def collect_data():
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç"""
    api = YouTubeAPI()
    collection_interval = 900  # 15 –º–∏–Ω—É—Ç

    while True:
        try:
            start_time = datetime.now()
            print(f"\n=== –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {start_time.strftime('%d.%m.%Y %H:%M:%S')} ===")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            channels = db.get_channels()

            for channel in channels:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞
                    videos = api.get_channel_videos(channel['channel_id'])
                    if videos:
                        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel['title']}")
                        for video in videos:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
                            db.save_video_metadata(
                                video['id'],
                                video['title'],
                                video['description'],
                                video.get('tags', []),
                                video['published_at'],
                                channel['channel_id']  # –î–æ–±–∞–≤–ª—è–µ–º channel_id
                            )

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–æ–∂–∫—É
                            if 'thumbnails' in video:
                                for quality in ['maxres', 'standard', 'high', 'medium', 'default']:
                                    if quality in video['thumbnails']:
                                        db.save_video_thumbnail(
                                            video['id'],
                                            video['thumbnails'][quality]['url']
                                        )
                                        break

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            try:
                                views = int(video['statistics']['viewCount'])
                                db.save_video_views(video['id'], views)
                                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ {video['title']}: {views:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {video['title']}: {str(e)}")
                                continue

                            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                            try:
                                comments = api.get_video_comments(video['id'])
                                if comments:
                                    db.save_comments(video['id'], comments)
                                    print(f"üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}")
                                continue

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö
                            view_change = db.check_view_changes(video['id'])
                            if view_change:
                                print(f"\nüîî –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ {video['title']}")
                                print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {view_change['percentage_change']:.1f}%")
                                print(f"–° {view_change['previous_views']:,} –¥–æ {view_change['current_views']:,}")
                except Exception as channel_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel['title']}: {channel_error}")
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–æ–º

            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            print(f"\n=== –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.1f} —Å–µ–∫—É–Ω–¥ ===")

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            wait_time = max(0, collection_interval - execution_time)
            next_update = datetime.now() + timedelta(seconds=wait_time)
            if wait_time > 0:
                print(f"–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ {next_update.strftime('%H:%M:%S')} (—á–µ—Ä–µ–∑ {wait_time/60:.1f} –º–∏–Ω—É—Ç)")
                time.sleep(wait_time)

        except Exception as e:
            print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == "__main__":
    print("\n=== –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    collect_data()